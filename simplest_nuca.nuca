program SIMPLEST;

/*/ Simple Variables /*/

a, b, c : int;
d, e, f : float;
g : string;
h : boolean;

int abs(n : int)
VARS{}
{
  if(n < 0){
    return n * -1;
  }
  return n;
}

int recursive_print(s : string, n : int, big_n : int)
VARS {
  i : int;
}
{
  if(n < big_n * -1){
    return big_n * -1 - 1;
  }
  i = recursive_print(s, n - 1, big_n);
  println(s + " * " + i + " = " + s * i,  ((big_n - abs(n)))  * "\t", s * i + " = " + i + " * " + s);
  return n;
}

int slow_fib(n :int)
VARS{}
{
  if(n < 2){
    return n;
  }

  return slow_fib(n - 1) + slow_fib(n - 2);
}

int factorial(n : int)
VARS {}
{
  if(n < 2){
    return 1;
  }
  return n * factorial(n - 1);
}


void infinite(useless : string)
VARS{
  var_1, var_2, var_3 : int;
}
{
  infinite("useless");
  return; /*/ never gonna happen! /*/
}

/*/ Array /*/

int_arr[100] : int;

main (){
  println("-'hola' = ", -"hola", 3 * -15 + 5 + (-5), -25.5, abs(-1), abs(0), abs(1));
  print(">> Enter an integer\n-- a = ");
  read(a);
  print(">> Enter a string\n-- f = ");
  read(g);

  recursive_print(g, a, a);

  int_arr[10] = 12;
  int_arr[93] = 1;

  for(a = 0; a <= int_arr[10] + 5; a = a + int_arr[93]){
    println(a + "! = " + factorial(a));
  }

  /*/ infinite("hi"); /*/

  println("Global a:", a);

  println("------------------------");

  print("HI ", " print() ", " prints inline,", " and needs this next param for a newline:", "\n");
  println("Hello from another line!", " println() acts just like print, " + "but always adds a '\\n' parameter at the end!");
  println("And this will skip two lines!", "\n");
  println("Nice : )");

  print(">> Enter yet another integer:\n-- ");
  read(a);
  println(">> slow_fib(" + a + ") = " + slow_fib(a));
}
