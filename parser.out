Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    UNTIL_KWD

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
Rule 2     CLASS_STAR -> CLASS CLASS_STAR
Rule 3     CLASS_STAR -> empty
Rule 4     CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY
Rule 5     CLASS_ATTR -> ATTR_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY
Rule 6     VAR_LIST_STAR -> VAR_LIST VAR_LIST_STAR
Rule 7     VAR_LIST_STAR -> empty
Rule 8     VAR_LIST -> ID_LIST COLON TYPE SEMI_COLON
Rule 9     ID_LIST -> ID ID_LIST_P
Rule 10    ID_LIST_P -> COMMA ID ID_LIST_P
Rule 11    ID_LIST_P -> empty
Rule 12    READABLE_LIST -> ID seen_readable READABLE_LIST_P
Rule 13    READABLE_LIST_P -> COMMA ID seen_readable READABLE_LIST_P
Rule 14    READABLE_LIST_P -> empty
Rule 15    seen_readable -> empty
Rule 16    GLOBAL_VAR -> VAR_LIST_STAR
Rule 17    FUNC_DEF_STAR -> FUNC_DEF FUNC_DEF_STAR
Rule 18    FUNC_DEF_STAR -> empty
Rule 19    FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
Rule 20    FUNC_PARAM -> VAR FUNC_PARAM_P
Rule 21    FUNC_PARAM -> empty
Rule 22    FUNC_PARAM_P -> COMMA VAR FUNC_PARAM_P
Rule 23    FUNC_PARAM_P -> empty
Rule 24    VAR -> ID COLON TYPE
Rule 25    VARS -> VARS_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY
Rule 26    STATEMENT_STAR -> STATEMENT STATEMENT_STAR
Rule 27    STATEMENT_STAR -> empty
Rule 28    STATEMENT -> ASSIGN
Rule 29    STATEMENT -> FUNC_RETURN
Rule 30    STATEMENT -> READ
Rule 31    STATEMENT -> WRITE
Rule 32    STATEMENT -> DECISION
Rule 33    STATEMENT -> REPETITION
Rule 34    ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
Rule 35    seen_equals -> empty
Rule 36    EXP -> TERM seen_term EXP_P
Rule 37    EXP -> NOT seen_not EXP pop_not
Rule 38    seen_term -> <empty>
Rule 39    EXP_P -> PLUS seen_term_op TERM seen_term EXP_P
Rule 40    EXP_P -> MINUS seen_term_op TERM seen_term EXP_P
Rule 41    EXP_P -> empty
Rule 42    seen_term_op -> <empty>
Rule 43    EXPRESSION -> EXP
Rule 44    EXPRESSION -> EXP COMP seen_comp_op EXP seen_comp
Rule 45    seen_comp -> empty
Rule 46    seen_comp_op -> empty
Rule 47    COMP -> BIGGER
Rule 48    COMP -> SMALLER
Rule 49    COMP -> DOUBLE_EQUALS
Rule 50    COMP -> DIFFERENT
Rule 51    COMP -> AND
Rule 52    COMP -> OR
Rule 53    FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
Rule 54    FACTOR -> NOT seen_not FACTOR pop_not
Rule 55    FACTOR -> FUNC_CALL
Rule 56    FACTOR -> ID seen_id
Rule 57    FACTOR -> CNST
Rule 58    pop_not -> empty
Rule 59    seen_not -> empty
Rule 60    seen_open_parenthesis -> empty
Rule 61    seen_close_parenthesis -> empty
Rule 62    seen_id -> <empty>
Rule 63    seen_cte_i -> <empty>
Rule 64    seen_cte_f -> <empty>
Rule 65    seen_cte_s -> <empty>
Rule 66    CNST -> CTE_S seen_cte_s
Rule 67    CNST -> CTE_F seen_cte_f
Rule 68    CNST -> CTE_I seen_cte_i
Rule 69    TERM -> FACTOR seen_factor TERM_P
Rule 70    TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P
Rule 71    TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P
Rule 72    TERM_P -> empty
Rule 73    seen_factor -> <empty>
Rule 74    seen_factor_op -> <empty>
Rule 75    FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
Rule 76    ARG_LIST -> ID_LIST ARG_LIST_P
Rule 77    ARG_LIST -> EXPRESSION ARG_LIST_P
Rule 78    ARG_LIST_P -> COMMA ID_LIST ARG_LIST_P
Rule 79    ARG_LIST_P -> COMMA EXPRESSION ARG_LIST_P
Rule 80    ARG_LIST_P -> empty
Rule 81    FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON
Rule 82    READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
Rule 83    WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
Rule 84    PRINTABLE -> EXPRESSION seen_printable PRINTABLE_P
Rule 85    PRINTABLE_P -> COMMA EXPRESSION seen_printable PRINTABLE_P
Rule 86    PRINTABLE_P -> empty
Rule 87    seen_printable -> empty
Rule 88    DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
Rule 89    DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
Rule 90    DECISION_P -> empty
Rule 91    seen_if_kwd -> empty
Rule 92    seen_else_kwd -> empty
Rule 93    REPETITION -> CONDITIONAL_REP
Rule 94    REPETITION -> UNCONDITIONAL_REP
Rule 95    CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
Rule 96    seen_while_kwd -> empty
Rule 97    seen_while_exp -> empty
Rule 98    UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
Rule 99    seen_for_kwd -> empty
Rule 100   seen_for_incr_exp -> empty
Rule 101   seen_for_start_exp -> empty
Rule 102   seen_for_end_exp -> empty
Rule 103   empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ATTR_KWD             : 5
BIGGER               : 4 47
CLASS_KWD            : 4
CLOSE_CURLY          : 1 4 5 19 25 88 89 95 98
CLOSE_PARENTHESIS    : 1 19 53 75 82 83 88 95 98
COLON                : 8 24
COMMA                : 10 13 22 78 79 85
CTE_F                : 67
CTE_I                : 68
CTE_S                : 66
DERIVES_KWD          : 4
DIFFERENT            : 50
DOUBLE_EQUALS        : 49
ELSE_KWD             : 89
EQUALS               : 34 98
FOR_KWD              : 98
FWD_SLASH            : 71
ID                   : 1 4 9 10 12 13 19 24 34 56 75 98
IF_KWD               : 88
MAIN_KWD             : 1
MINUS                : 40
NOT                  : 37 54
OPEN_CURLY           : 1 4 5 19 25 88 89 95 98
OPEN_PARENTHESIS     : 1 19 53 75 82 83 88 95 98
OR                   : 52
PLUS                 : 39
PROGRAM_KWD          : 1
READ_KWD             : 82
RETURN_KWD           : 81
SEMI_COLON           : 1 8 34 81 82 83 98 98
SMALLER              : 4 48
STAR                 : 70
TYPE                 : 4 8 19 24
UNTIL_KWD            : 
VARS_KWD             : 25
WHILE_KWD            : 95
WRITE_KWD            : 83
error                : 

Nonterminals, with rules where they appear

ARG_LIST             : 75
ARG_LIST_P           : 76 77 78 79
ASSIGN               : 28
CLASS                : 2
CLASS_ATTR           : 4
CLASS_STAR           : 1 2
CNST                 : 57
COMP                 : 44
CONDITIONAL_REP      : 93
DECISION             : 32
DECISION_P           : 88
EXP                  : 37 43 44 44
EXPRESSION           : 34 53 77 79 81 84 85 88 95 98 98
EXP_P                : 36 39 40
FACTOR               : 54 69 70 71
FUNC_CALL            : 55
FUNC_DEF             : 17
FUNC_DEF_STAR        : 1 4 17
FUNC_PARAM           : 19
FUNC_PARAM_P         : 20 22
FUNC_RETURN          : 29
GLOBAL_VAR           : 1
ID_LIST              : 8 76 78
ID_LIST_P            : 9 10
PRINTABLE            : 83
PRINTABLE_P          : 84 85
PROGRAM              : 0
READ                 : 30
READABLE_LIST        : 82
READABLE_LIST_P      : 12 13
REPETITION           : 33
STATEMENT            : 26 98
STATEMENT_STAR       : 1 19 26 88 89 95 98
TERM                 : 36 39 40
TERM_P               : 69 70 71
UNCONDITIONAL_REP    : 94
VAR                  : 20 22
VARS                 : 19
VAR_LIST             : 6
VAR_LIST_STAR        : 5 6 16 25
WRITE                : 31
empty                : 3 7 11 14 15 18 21 23 27 35 41 45 46 58 59 60 61 72 80 86 87 90 91 92 96 97 99 100 101 102
pop_not              : 37 54
seen_close_parenthesis : 53
seen_comp            : 44
seen_comp_op         : 44
seen_cte_f           : 67
seen_cte_i           : 68
seen_cte_s           : 66
seen_else_kwd        : 89
seen_equals          : 34
seen_factor          : 69 70 71
seen_factor_op       : 70 71
seen_for_end_exp     : 98
seen_for_incr_exp    : 98
seen_for_kwd         : 98
seen_for_start_exp   : 98
seen_id              : 34 56
seen_if_kwd          : 88
seen_not             : 37 54
seen_open_parenthesis : 53
seen_printable       : 84 85
seen_readable        : 12 13
seen_term            : 36 39 40
seen_term_op         : 39 40
seen_while_exp       : 95
seen_while_kwd       : 95

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    PROGRAM_KWD     shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROGRAM_KWD . ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    ID              shift and go to state 3


state 3

    (1) PROGRAM -> PROGRAM_KWD ID . SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    SEMI_COLON      shift and go to state 4


state 4

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON . CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (2) CLASS_STAR -> . CLASS CLASS_STAR
    (3) CLASS_STAR -> . empty
    (4) CLASS -> . CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY
    (103) empty -> .

    CLASS_KWD       shift and go to state 8
    ID              reduce using rule 103 (empty -> .)
    TYPE            reduce using rule 103 (empty -> .)
    MAIN_KWD        reduce using rule 103 (empty -> .)

    CLASS_STAR                     shift and go to state 5
    CLASS                          shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR . GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (16) GLOBAL_VAR -> . VAR_LIST_STAR
    (6) VAR_LIST_STAR -> . VAR_LIST VAR_LIST_STAR
    (7) VAR_LIST_STAR -> . empty
    (8) VAR_LIST -> . ID_LIST COLON TYPE SEMI_COLON
    (103) empty -> .
    (9) ID_LIST -> . ID ID_LIST_P

    TYPE            reduce using rule 103 (empty -> .)
    MAIN_KWD        reduce using rule 103 (empty -> .)
    ID              shift and go to state 9

    GLOBAL_VAR                     shift and go to state 10
    VAR_LIST_STAR                  shift and go to state 11
    VAR_LIST                       shift and go to state 12
    empty                          shift and go to state 13
    ID_LIST                        shift and go to state 14

state 6

    (2) CLASS_STAR -> CLASS . CLASS_STAR
    (2) CLASS_STAR -> . CLASS CLASS_STAR
    (3) CLASS_STAR -> . empty
    (4) CLASS -> . CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY
    (103) empty -> .

    CLASS_KWD       shift and go to state 8
    ID              reduce using rule 103 (empty -> .)
    TYPE            reduce using rule 103 (empty -> .)
    MAIN_KWD        reduce using rule 103 (empty -> .)

    CLASS                          shift and go to state 6
    CLASS_STAR                     shift and go to state 15
    empty                          shift and go to state 7

state 7

    (3) CLASS_STAR -> empty .

    ID              reduce using rule 3 (CLASS_STAR -> empty .)
    TYPE            reduce using rule 3 (CLASS_STAR -> empty .)
    MAIN_KWD        reduce using rule 3 (CLASS_STAR -> empty .)


state 8

    (4) CLASS -> CLASS_KWD . ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY

    ID              shift and go to state 16


state 9

    (9) ID_LIST -> ID . ID_LIST_P
    (10) ID_LIST_P -> . COMMA ID ID_LIST_P
    (11) ID_LIST_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 18
    COLON           reduce using rule 103 (empty -> .)

    ID_LIST_P                      shift and go to state 17
    empty                          shift and go to state 19

state 10

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR . FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (17) FUNC_DEF_STAR -> . FUNC_DEF FUNC_DEF_STAR
    (18) FUNC_DEF_STAR -> . empty
    (19) FUNC_DEF -> . TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (103) empty -> .

    TYPE            shift and go to state 23
    MAIN_KWD        reduce using rule 103 (empty -> .)

    FUNC_DEF_STAR                  shift and go to state 20
    FUNC_DEF                       shift and go to state 21
    empty                          shift and go to state 22

state 11

    (16) GLOBAL_VAR -> VAR_LIST_STAR .

    TYPE            reduce using rule 16 (GLOBAL_VAR -> VAR_LIST_STAR .)
    MAIN_KWD        reduce using rule 16 (GLOBAL_VAR -> VAR_LIST_STAR .)


state 12

    (6) VAR_LIST_STAR -> VAR_LIST . VAR_LIST_STAR
    (6) VAR_LIST_STAR -> . VAR_LIST VAR_LIST_STAR
    (7) VAR_LIST_STAR -> . empty
    (8) VAR_LIST -> . ID_LIST COLON TYPE SEMI_COLON
    (103) empty -> .
    (9) ID_LIST -> . ID ID_LIST_P

    TYPE            reduce using rule 103 (empty -> .)
    MAIN_KWD        reduce using rule 103 (empty -> .)
    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 9

    VAR_LIST                       shift and go to state 12
    VAR_LIST_STAR                  shift and go to state 24
    empty                          shift and go to state 13
    ID_LIST                        shift and go to state 14

state 13

    (7) VAR_LIST_STAR -> empty .

    TYPE            reduce using rule 7 (VAR_LIST_STAR -> empty .)
    MAIN_KWD        reduce using rule 7 (VAR_LIST_STAR -> empty .)
    CLOSE_CURLY     reduce using rule 7 (VAR_LIST_STAR -> empty .)


state 14

    (8) VAR_LIST -> ID_LIST . COLON TYPE SEMI_COLON

    COLON           shift and go to state 25


state 15

    (2) CLASS_STAR -> CLASS CLASS_STAR .

    ID              reduce using rule 2 (CLASS_STAR -> CLASS CLASS_STAR .)
    TYPE            reduce using rule 2 (CLASS_STAR -> CLASS CLASS_STAR .)
    MAIN_KWD        reduce using rule 2 (CLASS_STAR -> CLASS CLASS_STAR .)


state 16

    (4) CLASS -> CLASS_KWD ID . SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY

    SMALLER         shift and go to state 26


state 17

    (9) ID_LIST -> ID ID_LIST_P .

    COLON           reduce using rule 9 (ID_LIST -> ID ID_LIST_P .)
    COMMA           reduce using rule 9 (ID_LIST -> ID ID_LIST_P .)
    CLOSE_PARENTHESIS reduce using rule 9 (ID_LIST -> ID ID_LIST_P .)


state 18

    (10) ID_LIST_P -> COMMA . ID ID_LIST_P

    ID              shift and go to state 27


state 19

    (11) ID_LIST_P -> empty .

    COLON           reduce using rule 11 (ID_LIST_P -> empty .)
    COMMA           reduce using rule 11 (ID_LIST_P -> empty .)
    CLOSE_PARENTHESIS reduce using rule 11 (ID_LIST_P -> empty .)


state 20

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR . MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    MAIN_KWD        shift and go to state 28


state 21

    (17) FUNC_DEF_STAR -> FUNC_DEF . FUNC_DEF_STAR
    (17) FUNC_DEF_STAR -> . FUNC_DEF FUNC_DEF_STAR
    (18) FUNC_DEF_STAR -> . empty
    (19) FUNC_DEF -> . TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (103) empty -> .

    TYPE            shift and go to state 23
    MAIN_KWD        reduce using rule 103 (empty -> .)
    CLOSE_CURLY     reduce using rule 103 (empty -> .)

    FUNC_DEF                       shift and go to state 21
    FUNC_DEF_STAR                  shift and go to state 29
    empty                          shift and go to state 22

state 22

    (18) FUNC_DEF_STAR -> empty .

    MAIN_KWD        reduce using rule 18 (FUNC_DEF_STAR -> empty .)
    CLOSE_CURLY     reduce using rule 18 (FUNC_DEF_STAR -> empty .)


state 23

    (19) FUNC_DEF -> TYPE . ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    ID              shift and go to state 30


state 24

    (6) VAR_LIST_STAR -> VAR_LIST VAR_LIST_STAR .

    TYPE            reduce using rule 6 (VAR_LIST_STAR -> VAR_LIST VAR_LIST_STAR .)
    MAIN_KWD        reduce using rule 6 (VAR_LIST_STAR -> VAR_LIST VAR_LIST_STAR .)
    CLOSE_CURLY     reduce using rule 6 (VAR_LIST_STAR -> VAR_LIST VAR_LIST_STAR .)


state 25

    (8) VAR_LIST -> ID_LIST COLON . TYPE SEMI_COLON

    TYPE            shift and go to state 31


state 26

    (4) CLASS -> CLASS_KWD ID SMALLER . DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY

    DERIVES_KWD     shift and go to state 32


state 27

    (10) ID_LIST_P -> COMMA ID . ID_LIST_P
    (10) ID_LIST_P -> . COMMA ID ID_LIST_P
    (11) ID_LIST_P -> . empty
    (103) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 18
    COLON           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

  ! COMMA           [ reduce using rule 103 (empty -> .) ]

    ID_LIST_P                      shift and go to state 33
    empty                          shift and go to state 19

state 28

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_PARENTHESIS shift and go to state 34


state 29

    (17) FUNC_DEF_STAR -> FUNC_DEF FUNC_DEF_STAR .

    MAIN_KWD        reduce using rule 17 (FUNC_DEF_STAR -> FUNC_DEF FUNC_DEF_STAR .)
    CLOSE_CURLY     reduce using rule 17 (FUNC_DEF_STAR -> FUNC_DEF FUNC_DEF_STAR .)


state 30

    (19) FUNC_DEF -> TYPE ID . OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_PARENTHESIS shift and go to state 35


state 31

    (8) VAR_LIST -> ID_LIST COLON TYPE . SEMI_COLON

    SEMI_COLON      shift and go to state 36


state 32

    (4) CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD . TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY

    TYPE            shift and go to state 37


state 33

    (10) ID_LIST_P -> COMMA ID ID_LIST_P .

    COLON           reduce using rule 10 (ID_LIST_P -> COMMA ID ID_LIST_P .)
    COMMA           reduce using rule 10 (ID_LIST_P -> COMMA ID ID_LIST_P .)
    CLOSE_PARENTHESIS reduce using rule 10 (ID_LIST_P -> COMMA ID ID_LIST_P .)


state 34

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_PARENTHESIS shift and go to state 38


state 35

    (19) FUNC_DEF -> TYPE ID OPEN_PARENTHESIS . FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (20) FUNC_PARAM -> . VAR FUNC_PARAM_P
    (21) FUNC_PARAM -> . empty
    (24) VAR -> . ID COLON TYPE
    (103) empty -> .

    ID              shift and go to state 39
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    FUNC_PARAM                     shift and go to state 40
    VAR                            shift and go to state 41
    empty                          shift and go to state 42

state 36

    (8) VAR_LIST -> ID_LIST COLON TYPE SEMI_COLON .

    ID              reduce using rule 8 (VAR_LIST -> ID_LIST COLON TYPE SEMI_COLON .)
    TYPE            reduce using rule 8 (VAR_LIST -> ID_LIST COLON TYPE SEMI_COLON .)
    MAIN_KWD        reduce using rule 8 (VAR_LIST -> ID_LIST COLON TYPE SEMI_COLON .)
    CLOSE_CURLY     reduce using rule 8 (VAR_LIST -> ID_LIST COLON TYPE SEMI_COLON .)


state 37

    (4) CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE . BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY

    BIGGER          shift and go to state 43


state 38

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_CURLY      shift and go to state 44


state 39

    (24) VAR -> ID . COLON TYPE

    COLON           shift and go to state 45


state 40

    (19) FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM . CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_PARENTHESIS shift and go to state 46


state 41

    (20) FUNC_PARAM -> VAR . FUNC_PARAM_P
    (22) FUNC_PARAM_P -> . COMMA VAR FUNC_PARAM_P
    (23) FUNC_PARAM_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 48
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    FUNC_PARAM_P                   shift and go to state 47
    empty                          shift and go to state 49

state 42

    (21) FUNC_PARAM -> empty .

    CLOSE_PARENTHESIS reduce using rule 21 (FUNC_PARAM -> empty .)


state 43

    (4) CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER . OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY

    OPEN_CURLY      shift and go to state 50


state 44

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY . STATEMENT_STAR CLOSE_CURLY
    (26) STATEMENT_STAR -> . STATEMENT STATEMENT_STAR
    (27) STATEMENT_STAR -> . empty
    (28) STATEMENT -> . ASSIGN
    (29) STATEMENT -> . FUNC_RETURN
    (30) STATEMENT -> . READ
    (31) STATEMENT -> . WRITE
    (32) STATEMENT -> . DECISION
    (33) STATEMENT -> . REPETITION
    (103) empty -> .
    (34) ASSIGN -> . ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (81) FUNC_RETURN -> . RETURN_KWD EXPRESSION SEMI_COLON
    (82) READ -> . READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (83) WRITE -> . WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (88) DECISION -> . IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (93) REPETITION -> . CONDITIONAL_REP
    (94) REPETITION -> . UNCONDITIONAL_REP
    (95) CONDITIONAL_REP -> . WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (98) UNCONDITIONAL_REP -> . FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 51
    RETURN_KWD      shift and go to state 61
    READ_KWD        shift and go to state 62
    WRITE_KWD       shift and go to state 63
    IF_KWD          shift and go to state 64
    WHILE_KWD       shift and go to state 67
    FOR_KWD         shift and go to state 68

    STATEMENT_STAR                 shift and go to state 52
    STATEMENT                      shift and go to state 53
    empty                          shift and go to state 54
    ASSIGN                         shift and go to state 55
    FUNC_RETURN                    shift and go to state 56
    READ                           shift and go to state 57
    WRITE                          shift and go to state 58
    DECISION                       shift and go to state 59
    REPETITION                     shift and go to state 60
    CONDITIONAL_REP                shift and go to state 65
    UNCONDITIONAL_REP              shift and go to state 66

state 45

    (24) VAR -> ID COLON . TYPE

    TYPE            shift and go to state 69


state 46

    (19) FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS . VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (25) VARS -> . VARS_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY

    VARS_KWD        shift and go to state 71

    VARS                           shift and go to state 70

state 47

    (20) FUNC_PARAM -> VAR FUNC_PARAM_P .

    CLOSE_PARENTHESIS reduce using rule 20 (FUNC_PARAM -> VAR FUNC_PARAM_P .)


state 48

    (22) FUNC_PARAM_P -> COMMA . VAR FUNC_PARAM_P
    (24) VAR -> . ID COLON TYPE

    ID              shift and go to state 39

    VAR                            shift and go to state 72

state 49

    (23) FUNC_PARAM_P -> empty .

    CLOSE_PARENTHESIS reduce using rule 23 (FUNC_PARAM_P -> empty .)


state 50

    (4) CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY . CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY
    (5) CLASS_ATTR -> . ATTR_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY

    ATTR_KWD        shift and go to state 74

    CLASS_ATTR                     shift and go to state 73

state 51

    (34) ASSIGN -> ID . seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (62) seen_id -> .

    EQUALS          reduce using rule 62 (seen_id -> .)

    seen_id                        shift and go to state 75

state 52

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 76


state 53

    (26) STATEMENT_STAR -> STATEMENT . STATEMENT_STAR
    (26) STATEMENT_STAR -> . STATEMENT STATEMENT_STAR
    (27) STATEMENT_STAR -> . empty
    (28) STATEMENT -> . ASSIGN
    (29) STATEMENT -> . FUNC_RETURN
    (30) STATEMENT -> . READ
    (31) STATEMENT -> . WRITE
    (32) STATEMENT -> . DECISION
    (33) STATEMENT -> . REPETITION
    (103) empty -> .
    (34) ASSIGN -> . ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (81) FUNC_RETURN -> . RETURN_KWD EXPRESSION SEMI_COLON
    (82) READ -> . READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (83) WRITE -> . WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (88) DECISION -> . IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (93) REPETITION -> . CONDITIONAL_REP
    (94) REPETITION -> . UNCONDITIONAL_REP
    (95) CONDITIONAL_REP -> . WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (98) UNCONDITIONAL_REP -> . FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 51
    RETURN_KWD      shift and go to state 61
    READ_KWD        shift and go to state 62
    WRITE_KWD       shift and go to state 63
    IF_KWD          shift and go to state 64
    WHILE_KWD       shift and go to state 67
    FOR_KWD         shift and go to state 68

    STATEMENT                      shift and go to state 53
    STATEMENT_STAR                 shift and go to state 77
    empty                          shift and go to state 54
    ASSIGN                         shift and go to state 55
    FUNC_RETURN                    shift and go to state 56
    READ                           shift and go to state 57
    WRITE                          shift and go to state 58
    DECISION                       shift and go to state 59
    REPETITION                     shift and go to state 60
    CONDITIONAL_REP                shift and go to state 65
    UNCONDITIONAL_REP              shift and go to state 66

state 54

    (27) STATEMENT_STAR -> empty .

    CLOSE_CURLY     reduce using rule 27 (STATEMENT_STAR -> empty .)


state 55

    (28) STATEMENT -> ASSIGN .

    ID              reduce using rule 28 (STATEMENT -> ASSIGN .)
    RETURN_KWD      reduce using rule 28 (STATEMENT -> ASSIGN .)
    READ_KWD        reduce using rule 28 (STATEMENT -> ASSIGN .)
    WRITE_KWD       reduce using rule 28 (STATEMENT -> ASSIGN .)
    IF_KWD          reduce using rule 28 (STATEMENT -> ASSIGN .)
    WHILE_KWD       reduce using rule 28 (STATEMENT -> ASSIGN .)
    FOR_KWD         reduce using rule 28 (STATEMENT -> ASSIGN .)
    CLOSE_CURLY     reduce using rule 28 (STATEMENT -> ASSIGN .)
    CLOSE_PARENTHESIS reduce using rule 28 (STATEMENT -> ASSIGN .)


state 56

    (29) STATEMENT -> FUNC_RETURN .

    ID              reduce using rule 29 (STATEMENT -> FUNC_RETURN .)
    RETURN_KWD      reduce using rule 29 (STATEMENT -> FUNC_RETURN .)
    READ_KWD        reduce using rule 29 (STATEMENT -> FUNC_RETURN .)
    WRITE_KWD       reduce using rule 29 (STATEMENT -> FUNC_RETURN .)
    IF_KWD          reduce using rule 29 (STATEMENT -> FUNC_RETURN .)
    WHILE_KWD       reduce using rule 29 (STATEMENT -> FUNC_RETURN .)
    FOR_KWD         reduce using rule 29 (STATEMENT -> FUNC_RETURN .)
    CLOSE_CURLY     reduce using rule 29 (STATEMENT -> FUNC_RETURN .)
    CLOSE_PARENTHESIS reduce using rule 29 (STATEMENT -> FUNC_RETURN .)


state 57

    (30) STATEMENT -> READ .

    ID              reduce using rule 30 (STATEMENT -> READ .)
    RETURN_KWD      reduce using rule 30 (STATEMENT -> READ .)
    READ_KWD        reduce using rule 30 (STATEMENT -> READ .)
    WRITE_KWD       reduce using rule 30 (STATEMENT -> READ .)
    IF_KWD          reduce using rule 30 (STATEMENT -> READ .)
    WHILE_KWD       reduce using rule 30 (STATEMENT -> READ .)
    FOR_KWD         reduce using rule 30 (STATEMENT -> READ .)
    CLOSE_CURLY     reduce using rule 30 (STATEMENT -> READ .)
    CLOSE_PARENTHESIS reduce using rule 30 (STATEMENT -> READ .)


state 58

    (31) STATEMENT -> WRITE .

    ID              reduce using rule 31 (STATEMENT -> WRITE .)
    RETURN_KWD      reduce using rule 31 (STATEMENT -> WRITE .)
    READ_KWD        reduce using rule 31 (STATEMENT -> WRITE .)
    WRITE_KWD       reduce using rule 31 (STATEMENT -> WRITE .)
    IF_KWD          reduce using rule 31 (STATEMENT -> WRITE .)
    WHILE_KWD       reduce using rule 31 (STATEMENT -> WRITE .)
    FOR_KWD         reduce using rule 31 (STATEMENT -> WRITE .)
    CLOSE_CURLY     reduce using rule 31 (STATEMENT -> WRITE .)
    CLOSE_PARENTHESIS reduce using rule 31 (STATEMENT -> WRITE .)


state 59

    (32) STATEMENT -> DECISION .

    ID              reduce using rule 32 (STATEMENT -> DECISION .)
    RETURN_KWD      reduce using rule 32 (STATEMENT -> DECISION .)
    READ_KWD        reduce using rule 32 (STATEMENT -> DECISION .)
    WRITE_KWD       reduce using rule 32 (STATEMENT -> DECISION .)
    IF_KWD          reduce using rule 32 (STATEMENT -> DECISION .)
    WHILE_KWD       reduce using rule 32 (STATEMENT -> DECISION .)
    FOR_KWD         reduce using rule 32 (STATEMENT -> DECISION .)
    CLOSE_CURLY     reduce using rule 32 (STATEMENT -> DECISION .)
    CLOSE_PARENTHESIS reduce using rule 32 (STATEMENT -> DECISION .)


state 60

    (33) STATEMENT -> REPETITION .

    ID              reduce using rule 33 (STATEMENT -> REPETITION .)
    RETURN_KWD      reduce using rule 33 (STATEMENT -> REPETITION .)
    READ_KWD        reduce using rule 33 (STATEMENT -> REPETITION .)
    WRITE_KWD       reduce using rule 33 (STATEMENT -> REPETITION .)
    IF_KWD          reduce using rule 33 (STATEMENT -> REPETITION .)
    WHILE_KWD       reduce using rule 33 (STATEMENT -> REPETITION .)
    FOR_KWD         reduce using rule 33 (STATEMENT -> REPETITION .)
    CLOSE_CURLY     reduce using rule 33 (STATEMENT -> REPETITION .)
    CLOSE_PARENTHESIS reduce using rule 33 (STATEMENT -> REPETITION .)


state 61

    (81) FUNC_RETURN -> RETURN_KWD . EXPRESSION SEMI_COLON
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXPRESSION                     shift and go to state 78
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 62

    (82) READ -> READ_KWD . OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON

    OPEN_PARENTHESIS shift and go to state 90


state 63

    (83) WRITE -> WRITE_KWD . OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON

    OPEN_PARENTHESIS shift and go to state 91


state 64

    (88) DECISION -> IF_KWD . OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P

    OPEN_PARENTHESIS shift and go to state 92


state 65

    (93) REPETITION -> CONDITIONAL_REP .

    ID              reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)
    RETURN_KWD      reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)
    READ_KWD        reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)
    WRITE_KWD       reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)
    IF_KWD          reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)
    WHILE_KWD       reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)
    FOR_KWD         reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)
    CLOSE_CURLY     reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)
    CLOSE_PARENTHESIS reduce using rule 93 (REPETITION -> CONDITIONAL_REP .)


state 66

    (94) REPETITION -> UNCONDITIONAL_REP .

    ID              reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)
    RETURN_KWD      reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)
    READ_KWD        reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)
    WRITE_KWD       reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)
    IF_KWD          reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)
    WHILE_KWD       reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)
    FOR_KWD         reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)
    CLOSE_CURLY     reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)
    CLOSE_PARENTHESIS reduce using rule 94 (REPETITION -> UNCONDITIONAL_REP .)


state 67

    (95) CONDITIONAL_REP -> WHILE_KWD . seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (96) seen_while_kwd -> . empty
    (103) empty -> .

    OPEN_PARENTHESIS reduce using rule 103 (empty -> .)

    seen_while_kwd                 shift and go to state 93
    empty                          shift and go to state 94

state 68

    (98) UNCONDITIONAL_REP -> FOR_KWD . OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_PARENTHESIS shift and go to state 95


state 69

    (24) VAR -> ID COLON TYPE .

    COMMA           reduce using rule 24 (VAR -> ID COLON TYPE .)
    CLOSE_PARENTHESIS reduce using rule 24 (VAR -> ID COLON TYPE .)


state 70

    (19) FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS . OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_CURLY      shift and go to state 96


state 71

    (25) VARS -> VARS_KWD . OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY

    OPEN_CURLY      shift and go to state 97


state 72

    (22) FUNC_PARAM_P -> COMMA VAR . FUNC_PARAM_P
    (22) FUNC_PARAM_P -> . COMMA VAR FUNC_PARAM_P
    (23) FUNC_PARAM_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 48
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    FUNC_PARAM_P                   shift and go to state 98
    empty                          shift and go to state 49

state 73

    (4) CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR . FUNC_DEF_STAR CLOSE_CURLY
    (17) FUNC_DEF_STAR -> . FUNC_DEF FUNC_DEF_STAR
    (18) FUNC_DEF_STAR -> . empty
    (19) FUNC_DEF -> . TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (103) empty -> .

    TYPE            shift and go to state 23
    CLOSE_CURLY     reduce using rule 103 (empty -> .)

    FUNC_DEF_STAR                  shift and go to state 99
    FUNC_DEF                       shift and go to state 21
    empty                          shift and go to state 22

state 74

    (5) CLASS_ATTR -> ATTR_KWD . OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY

    OPEN_CURLY      shift and go to state 100


state 75

    (34) ASSIGN -> ID seen_id . EQUALS seen_equals EXPRESSION SEMI_COLON

    EQUALS          shift and go to state 101


state 76

    (1) PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .

    $end            reduce using rule 1 (PROGRAM -> PROGRAM_KWD ID SEMI_COLON CLASS_STAR GLOBAL_VAR FUNC_DEF_STAR MAIN_KWD OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)


state 77

    (26) STATEMENT_STAR -> STATEMENT STATEMENT_STAR .

    CLOSE_CURLY     reduce using rule 26 (STATEMENT_STAR -> STATEMENT STATEMENT_STAR .)


state 78

    (81) FUNC_RETURN -> RETURN_KWD EXPRESSION . SEMI_COLON

    SEMI_COLON      shift and go to state 102


state 79

    (43) EXPRESSION -> EXP .
    (44) EXPRESSION -> EXP . COMP seen_comp_op EXP seen_comp
    (47) COMP -> . BIGGER
    (48) COMP -> . SMALLER
    (49) COMP -> . DOUBLE_EQUALS
    (50) COMP -> . DIFFERENT
    (51) COMP -> . AND
    (52) COMP -> . OR

    SEMI_COLON      reduce using rule 43 (EXPRESSION -> EXP .)
    COMMA           reduce using rule 43 (EXPRESSION -> EXP .)
    CLOSE_PARENTHESIS reduce using rule 43 (EXPRESSION -> EXP .)
    BIGGER          shift and go to state 104
    SMALLER         shift and go to state 105
    DOUBLE_EQUALS   shift and go to state 106
    DIFFERENT       shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109

    COMP                           shift and go to state 103

state 80

    (36) EXP -> TERM . seen_term EXP_P
    (38) seen_term -> .

    PLUS            reduce using rule 38 (seen_term -> .)
    MINUS           reduce using rule 38 (seen_term -> .)
    BIGGER          reduce using rule 38 (seen_term -> .)
    SMALLER         reduce using rule 38 (seen_term -> .)
    DOUBLE_EQUALS   reduce using rule 38 (seen_term -> .)
    DIFFERENT       reduce using rule 38 (seen_term -> .)
    AND             reduce using rule 38 (seen_term -> .)
    OR              reduce using rule 38 (seen_term -> .)
    SEMI_COLON      reduce using rule 38 (seen_term -> .)
    COMMA           reduce using rule 38 (seen_term -> .)
    CLOSE_PARENTHESIS reduce using rule 38 (seen_term -> .)

    seen_term                      shift and go to state 110

state 81

    (37) EXP -> NOT . seen_not EXP pop_not
    (54) FACTOR -> NOT . seen_not FACTOR pop_not
    (59) seen_not -> . empty
    (103) empty -> .

    NOT             reduce using rule 103 (empty -> .)
    OPEN_PARENTHESIS reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_S           reduce using rule 103 (empty -> .)
    CTE_F           reduce using rule 103 (empty -> .)
    CTE_I           reduce using rule 103 (empty -> .)

    seen_not                       shift and go to state 111
    empty                          shift and go to state 112

state 82

    (69) TERM -> FACTOR . seen_factor TERM_P
    (73) seen_factor -> .

    STAR            reduce using rule 73 (seen_factor -> .)
    FWD_SLASH       reduce using rule 73 (seen_factor -> .)
    PLUS            reduce using rule 73 (seen_factor -> .)
    MINUS           reduce using rule 73 (seen_factor -> .)
    BIGGER          reduce using rule 73 (seen_factor -> .)
    SMALLER         reduce using rule 73 (seen_factor -> .)
    DOUBLE_EQUALS   reduce using rule 73 (seen_factor -> .)
    DIFFERENT       reduce using rule 73 (seen_factor -> .)
    AND             reduce using rule 73 (seen_factor -> .)
    OR              reduce using rule 73 (seen_factor -> .)
    SEMI_COLON      reduce using rule 73 (seen_factor -> .)
    COMMA           reduce using rule 73 (seen_factor -> .)
    CLOSE_PARENTHESIS reduce using rule 73 (seen_factor -> .)

    seen_factor                    shift and go to state 113

state 83

    (53) FACTOR -> OPEN_PARENTHESIS . seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (60) seen_open_parenthesis -> . empty
    (103) empty -> .

    NOT             reduce using rule 103 (empty -> .)
    OPEN_PARENTHESIS reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_S           reduce using rule 103 (empty -> .)
    CTE_F           reduce using rule 103 (empty -> .)
    CTE_I           reduce using rule 103 (empty -> .)

    seen_open_parenthesis          shift and go to state 114
    empty                          shift and go to state 115

state 84

    (55) FACTOR -> FUNC_CALL .

    STAR            reduce using rule 55 (FACTOR -> FUNC_CALL .)
    FWD_SLASH       reduce using rule 55 (FACTOR -> FUNC_CALL .)
    PLUS            reduce using rule 55 (FACTOR -> FUNC_CALL .)
    MINUS           reduce using rule 55 (FACTOR -> FUNC_CALL .)
    BIGGER          reduce using rule 55 (FACTOR -> FUNC_CALL .)
    SMALLER         reduce using rule 55 (FACTOR -> FUNC_CALL .)
    DOUBLE_EQUALS   reduce using rule 55 (FACTOR -> FUNC_CALL .)
    DIFFERENT       reduce using rule 55 (FACTOR -> FUNC_CALL .)
    AND             reduce using rule 55 (FACTOR -> FUNC_CALL .)
    OR              reduce using rule 55 (FACTOR -> FUNC_CALL .)
    SEMI_COLON      reduce using rule 55 (FACTOR -> FUNC_CALL .)
    COMMA           reduce using rule 55 (FACTOR -> FUNC_CALL .)
    CLOSE_PARENTHESIS reduce using rule 55 (FACTOR -> FUNC_CALL .)


state 85

    (56) FACTOR -> ID . seen_id
    (75) FUNC_CALL -> ID . OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (62) seen_id -> .

    OPEN_PARENTHESIS shift and go to state 117
    STAR            reduce using rule 62 (seen_id -> .)
    FWD_SLASH       reduce using rule 62 (seen_id -> .)
    PLUS            reduce using rule 62 (seen_id -> .)
    MINUS           reduce using rule 62 (seen_id -> .)
    BIGGER          reduce using rule 62 (seen_id -> .)
    SMALLER         reduce using rule 62 (seen_id -> .)
    DOUBLE_EQUALS   reduce using rule 62 (seen_id -> .)
    DIFFERENT       reduce using rule 62 (seen_id -> .)
    AND             reduce using rule 62 (seen_id -> .)
    OR              reduce using rule 62 (seen_id -> .)
    SEMI_COLON      reduce using rule 62 (seen_id -> .)
    COMMA           reduce using rule 62 (seen_id -> .)
    CLOSE_PARENTHESIS reduce using rule 62 (seen_id -> .)

    seen_id                        shift and go to state 116

state 86

    (57) FACTOR -> CNST .

    STAR            reduce using rule 57 (FACTOR -> CNST .)
    FWD_SLASH       reduce using rule 57 (FACTOR -> CNST .)
    PLUS            reduce using rule 57 (FACTOR -> CNST .)
    MINUS           reduce using rule 57 (FACTOR -> CNST .)
    BIGGER          reduce using rule 57 (FACTOR -> CNST .)
    SMALLER         reduce using rule 57 (FACTOR -> CNST .)
    DOUBLE_EQUALS   reduce using rule 57 (FACTOR -> CNST .)
    DIFFERENT       reduce using rule 57 (FACTOR -> CNST .)
    AND             reduce using rule 57 (FACTOR -> CNST .)
    OR              reduce using rule 57 (FACTOR -> CNST .)
    SEMI_COLON      reduce using rule 57 (FACTOR -> CNST .)
    COMMA           reduce using rule 57 (FACTOR -> CNST .)
    CLOSE_PARENTHESIS reduce using rule 57 (FACTOR -> CNST .)


state 87

    (66) CNST -> CTE_S . seen_cte_s
    (65) seen_cte_s -> .

    STAR            reduce using rule 65 (seen_cte_s -> .)
    FWD_SLASH       reduce using rule 65 (seen_cte_s -> .)
    PLUS            reduce using rule 65 (seen_cte_s -> .)
    MINUS           reduce using rule 65 (seen_cte_s -> .)
    BIGGER          reduce using rule 65 (seen_cte_s -> .)
    SMALLER         reduce using rule 65 (seen_cte_s -> .)
    DOUBLE_EQUALS   reduce using rule 65 (seen_cte_s -> .)
    DIFFERENT       reduce using rule 65 (seen_cte_s -> .)
    AND             reduce using rule 65 (seen_cte_s -> .)
    OR              reduce using rule 65 (seen_cte_s -> .)
    SEMI_COLON      reduce using rule 65 (seen_cte_s -> .)
    COMMA           reduce using rule 65 (seen_cte_s -> .)
    CLOSE_PARENTHESIS reduce using rule 65 (seen_cte_s -> .)

    seen_cte_s                     shift and go to state 118

state 88

    (67) CNST -> CTE_F . seen_cte_f
    (64) seen_cte_f -> .

    STAR            reduce using rule 64 (seen_cte_f -> .)
    FWD_SLASH       reduce using rule 64 (seen_cte_f -> .)
    PLUS            reduce using rule 64 (seen_cte_f -> .)
    MINUS           reduce using rule 64 (seen_cte_f -> .)
    BIGGER          reduce using rule 64 (seen_cte_f -> .)
    SMALLER         reduce using rule 64 (seen_cte_f -> .)
    DOUBLE_EQUALS   reduce using rule 64 (seen_cte_f -> .)
    DIFFERENT       reduce using rule 64 (seen_cte_f -> .)
    AND             reduce using rule 64 (seen_cte_f -> .)
    OR              reduce using rule 64 (seen_cte_f -> .)
    SEMI_COLON      reduce using rule 64 (seen_cte_f -> .)
    COMMA           reduce using rule 64 (seen_cte_f -> .)
    CLOSE_PARENTHESIS reduce using rule 64 (seen_cte_f -> .)

    seen_cte_f                     shift and go to state 119

state 89

    (68) CNST -> CTE_I . seen_cte_i
    (63) seen_cte_i -> .

    STAR            reduce using rule 63 (seen_cte_i -> .)
    FWD_SLASH       reduce using rule 63 (seen_cte_i -> .)
    PLUS            reduce using rule 63 (seen_cte_i -> .)
    MINUS           reduce using rule 63 (seen_cte_i -> .)
    BIGGER          reduce using rule 63 (seen_cte_i -> .)
    SMALLER         reduce using rule 63 (seen_cte_i -> .)
    DOUBLE_EQUALS   reduce using rule 63 (seen_cte_i -> .)
    DIFFERENT       reduce using rule 63 (seen_cte_i -> .)
    AND             reduce using rule 63 (seen_cte_i -> .)
    OR              reduce using rule 63 (seen_cte_i -> .)
    SEMI_COLON      reduce using rule 63 (seen_cte_i -> .)
    COMMA           reduce using rule 63 (seen_cte_i -> .)
    CLOSE_PARENTHESIS reduce using rule 63 (seen_cte_i -> .)

    seen_cte_i                     shift and go to state 120

state 90

    (82) READ -> READ_KWD OPEN_PARENTHESIS . READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (12) READABLE_LIST -> . ID seen_readable READABLE_LIST_P

    ID              shift and go to state 122

    READABLE_LIST                  shift and go to state 121

state 91

    (83) WRITE -> WRITE_KWD OPEN_PARENTHESIS . PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (84) PRINTABLE -> . EXPRESSION seen_printable PRINTABLE_P
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    PRINTABLE                      shift and go to state 123
    EXPRESSION                     shift and go to state 124
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 92

    (88) DECISION -> IF_KWD OPEN_PARENTHESIS . EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXPRESSION                     shift and go to state 125
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 93

    (95) CONDITIONAL_REP -> WHILE_KWD seen_while_kwd . OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_PARENTHESIS shift and go to state 126


state 94

    (96) seen_while_kwd -> empty .

    OPEN_PARENTHESIS reduce using rule 96 (seen_while_kwd -> empty .)


state 95

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS . ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    ID              shift and go to state 127


state 96

    (19) FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY . STATEMENT_STAR CLOSE_CURLY
    (26) STATEMENT_STAR -> . STATEMENT STATEMENT_STAR
    (27) STATEMENT_STAR -> . empty
    (28) STATEMENT -> . ASSIGN
    (29) STATEMENT -> . FUNC_RETURN
    (30) STATEMENT -> . READ
    (31) STATEMENT -> . WRITE
    (32) STATEMENT -> . DECISION
    (33) STATEMENT -> . REPETITION
    (103) empty -> .
    (34) ASSIGN -> . ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (81) FUNC_RETURN -> . RETURN_KWD EXPRESSION SEMI_COLON
    (82) READ -> . READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (83) WRITE -> . WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (88) DECISION -> . IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (93) REPETITION -> . CONDITIONAL_REP
    (94) REPETITION -> . UNCONDITIONAL_REP
    (95) CONDITIONAL_REP -> . WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (98) UNCONDITIONAL_REP -> . FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 51
    RETURN_KWD      shift and go to state 61
    READ_KWD        shift and go to state 62
    WRITE_KWD       shift and go to state 63
    IF_KWD          shift and go to state 64
    WHILE_KWD       shift and go to state 67
    FOR_KWD         shift and go to state 68

    STATEMENT_STAR                 shift and go to state 128
    STATEMENT                      shift and go to state 53
    empty                          shift and go to state 54
    ASSIGN                         shift and go to state 55
    FUNC_RETURN                    shift and go to state 56
    READ                           shift and go to state 57
    WRITE                          shift and go to state 58
    DECISION                       shift and go to state 59
    REPETITION                     shift and go to state 60
    CONDITIONAL_REP                shift and go to state 65
    UNCONDITIONAL_REP              shift and go to state 66

state 97

    (25) VARS -> VARS_KWD OPEN_CURLY . VAR_LIST_STAR CLOSE_CURLY
    (6) VAR_LIST_STAR -> . VAR_LIST VAR_LIST_STAR
    (7) VAR_LIST_STAR -> . empty
    (8) VAR_LIST -> . ID_LIST COLON TYPE SEMI_COLON
    (103) empty -> .
    (9) ID_LIST -> . ID ID_LIST_P

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 9

    VAR_LIST_STAR                  shift and go to state 129
    VAR_LIST                       shift and go to state 12
    empty                          shift and go to state 13
    ID_LIST                        shift and go to state 14

state 98

    (22) FUNC_PARAM_P -> COMMA VAR FUNC_PARAM_P .

    CLOSE_PARENTHESIS reduce using rule 22 (FUNC_PARAM_P -> COMMA VAR FUNC_PARAM_P .)


state 99

    (4) CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 130


state 100

    (5) CLASS_ATTR -> ATTR_KWD OPEN_CURLY . VAR_LIST_STAR CLOSE_CURLY
    (6) VAR_LIST_STAR -> . VAR_LIST VAR_LIST_STAR
    (7) VAR_LIST_STAR -> . empty
    (8) VAR_LIST -> . ID_LIST COLON TYPE SEMI_COLON
    (103) empty -> .
    (9) ID_LIST -> . ID ID_LIST_P

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 9

    VAR_LIST_STAR                  shift and go to state 131
    VAR_LIST                       shift and go to state 12
    empty                          shift and go to state 13
    ID_LIST                        shift and go to state 14

state 101

    (34) ASSIGN -> ID seen_id EQUALS . seen_equals EXPRESSION SEMI_COLON
    (35) seen_equals -> . empty
    (103) empty -> .

    NOT             reduce using rule 103 (empty -> .)
    OPEN_PARENTHESIS reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_S           reduce using rule 103 (empty -> .)
    CTE_F           reduce using rule 103 (empty -> .)
    CTE_I           reduce using rule 103 (empty -> .)

    seen_equals                    shift and go to state 132
    empty                          shift and go to state 133

state 102

    (81) FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .

    ID              reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)
    RETURN_KWD      reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)
    READ_KWD        reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)
    WRITE_KWD       reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)
    IF_KWD          reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)
    WHILE_KWD       reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)
    FOR_KWD         reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)
    CLOSE_CURLY     reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)
    CLOSE_PARENTHESIS reduce using rule 81 (FUNC_RETURN -> RETURN_KWD EXPRESSION SEMI_COLON .)


state 103

    (44) EXPRESSION -> EXP COMP . seen_comp_op EXP seen_comp
    (46) seen_comp_op -> . empty
    (103) empty -> .

    NOT             reduce using rule 103 (empty -> .)
    OPEN_PARENTHESIS reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_S           reduce using rule 103 (empty -> .)
    CTE_F           reduce using rule 103 (empty -> .)
    CTE_I           reduce using rule 103 (empty -> .)

    seen_comp_op                   shift and go to state 134
    empty                          shift and go to state 135

state 104

    (47) COMP -> BIGGER .

    NOT             reduce using rule 47 (COMP -> BIGGER .)
    OPEN_PARENTHESIS reduce using rule 47 (COMP -> BIGGER .)
    ID              reduce using rule 47 (COMP -> BIGGER .)
    CTE_S           reduce using rule 47 (COMP -> BIGGER .)
    CTE_F           reduce using rule 47 (COMP -> BIGGER .)
    CTE_I           reduce using rule 47 (COMP -> BIGGER .)


state 105

    (48) COMP -> SMALLER .

    NOT             reduce using rule 48 (COMP -> SMALLER .)
    OPEN_PARENTHESIS reduce using rule 48 (COMP -> SMALLER .)
    ID              reduce using rule 48 (COMP -> SMALLER .)
    CTE_S           reduce using rule 48 (COMP -> SMALLER .)
    CTE_F           reduce using rule 48 (COMP -> SMALLER .)
    CTE_I           reduce using rule 48 (COMP -> SMALLER .)


state 106

    (49) COMP -> DOUBLE_EQUALS .

    NOT             reduce using rule 49 (COMP -> DOUBLE_EQUALS .)
    OPEN_PARENTHESIS reduce using rule 49 (COMP -> DOUBLE_EQUALS .)
    ID              reduce using rule 49 (COMP -> DOUBLE_EQUALS .)
    CTE_S           reduce using rule 49 (COMP -> DOUBLE_EQUALS .)
    CTE_F           reduce using rule 49 (COMP -> DOUBLE_EQUALS .)
    CTE_I           reduce using rule 49 (COMP -> DOUBLE_EQUALS .)


state 107

    (50) COMP -> DIFFERENT .

    NOT             reduce using rule 50 (COMP -> DIFFERENT .)
    OPEN_PARENTHESIS reduce using rule 50 (COMP -> DIFFERENT .)
    ID              reduce using rule 50 (COMP -> DIFFERENT .)
    CTE_S           reduce using rule 50 (COMP -> DIFFERENT .)
    CTE_F           reduce using rule 50 (COMP -> DIFFERENT .)
    CTE_I           reduce using rule 50 (COMP -> DIFFERENT .)


state 108

    (51) COMP -> AND .

    NOT             reduce using rule 51 (COMP -> AND .)
    OPEN_PARENTHESIS reduce using rule 51 (COMP -> AND .)
    ID              reduce using rule 51 (COMP -> AND .)
    CTE_S           reduce using rule 51 (COMP -> AND .)
    CTE_F           reduce using rule 51 (COMP -> AND .)
    CTE_I           reduce using rule 51 (COMP -> AND .)


state 109

    (52) COMP -> OR .

    NOT             reduce using rule 52 (COMP -> OR .)
    OPEN_PARENTHESIS reduce using rule 52 (COMP -> OR .)
    ID              reduce using rule 52 (COMP -> OR .)
    CTE_S           reduce using rule 52 (COMP -> OR .)
    CTE_F           reduce using rule 52 (COMP -> OR .)
    CTE_I           reduce using rule 52 (COMP -> OR .)


state 110

    (36) EXP -> TERM seen_term . EXP_P
    (39) EXP_P -> . PLUS seen_term_op TERM seen_term EXP_P
    (40) EXP_P -> . MINUS seen_term_op TERM seen_term EXP_P
    (41) EXP_P -> . empty
    (103) empty -> .

    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    EXP_P                          shift and go to state 136
    empty                          shift and go to state 139

state 111

    (37) EXP -> NOT seen_not . EXP pop_not
    (54) FACTOR -> NOT seen_not . FACTOR pop_not
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (69) TERM -> . FACTOR seen_factor TERM_P
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXP                            shift and go to state 140
    FACTOR                         shift and go to state 141
    TERM                           shift and go to state 80
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 112

    (59) seen_not -> empty .

    NOT             reduce using rule 59 (seen_not -> empty .)
    OPEN_PARENTHESIS reduce using rule 59 (seen_not -> empty .)
    ID              reduce using rule 59 (seen_not -> empty .)
    CTE_S           reduce using rule 59 (seen_not -> empty .)
    CTE_F           reduce using rule 59 (seen_not -> empty .)
    CTE_I           reduce using rule 59 (seen_not -> empty .)


state 113

    (69) TERM -> FACTOR seen_factor . TERM_P
    (70) TERM_P -> . STAR seen_factor_op FACTOR seen_factor TERM_P
    (71) TERM_P -> . FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P
    (72) TERM_P -> . empty
    (103) empty -> .

    STAR            shift and go to state 143
    FWD_SLASH       shift and go to state 144
    PLUS            reduce using rule 103 (empty -> .)
    MINUS           reduce using rule 103 (empty -> .)
    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    TERM_P                         shift and go to state 142
    empty                          shift and go to state 145

state 114

    (53) FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis . EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXPRESSION                     shift and go to state 146
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 115

    (60) seen_open_parenthesis -> empty .

    NOT             reduce using rule 60 (seen_open_parenthesis -> empty .)
    OPEN_PARENTHESIS reduce using rule 60 (seen_open_parenthesis -> empty .)
    ID              reduce using rule 60 (seen_open_parenthesis -> empty .)
    CTE_S           reduce using rule 60 (seen_open_parenthesis -> empty .)
    CTE_F           reduce using rule 60 (seen_open_parenthesis -> empty .)
    CTE_I           reduce using rule 60 (seen_open_parenthesis -> empty .)


state 116

    (56) FACTOR -> ID seen_id .

    STAR            reduce using rule 56 (FACTOR -> ID seen_id .)
    FWD_SLASH       reduce using rule 56 (FACTOR -> ID seen_id .)
    PLUS            reduce using rule 56 (FACTOR -> ID seen_id .)
    MINUS           reduce using rule 56 (FACTOR -> ID seen_id .)
    BIGGER          reduce using rule 56 (FACTOR -> ID seen_id .)
    SMALLER         reduce using rule 56 (FACTOR -> ID seen_id .)
    DOUBLE_EQUALS   reduce using rule 56 (FACTOR -> ID seen_id .)
    DIFFERENT       reduce using rule 56 (FACTOR -> ID seen_id .)
    AND             reduce using rule 56 (FACTOR -> ID seen_id .)
    OR              reduce using rule 56 (FACTOR -> ID seen_id .)
    SEMI_COLON      reduce using rule 56 (FACTOR -> ID seen_id .)
    COMMA           reduce using rule 56 (FACTOR -> ID seen_id .)
    CLOSE_PARENTHESIS reduce using rule 56 (FACTOR -> ID seen_id .)


state 117

    (75) FUNC_CALL -> ID OPEN_PARENTHESIS . ARG_LIST CLOSE_PARENTHESIS
    (76) ARG_LIST -> . ID_LIST ARG_LIST_P
    (77) ARG_LIST -> . EXPRESSION ARG_LIST_P
    (9) ID_LIST -> . ID ID_LIST_P
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    ID              shift and go to state 147
    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    ARG_LIST                       shift and go to state 148
    ID_LIST                        shift and go to state 149
    EXPRESSION                     shift and go to state 150
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 118

    (66) CNST -> CTE_S seen_cte_s .

    STAR            reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    FWD_SLASH       reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    PLUS            reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    MINUS           reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    BIGGER          reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    SMALLER         reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    DOUBLE_EQUALS   reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    DIFFERENT       reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    AND             reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    OR              reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    SEMI_COLON      reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    COMMA           reduce using rule 66 (CNST -> CTE_S seen_cte_s .)
    CLOSE_PARENTHESIS reduce using rule 66 (CNST -> CTE_S seen_cte_s .)


state 119

    (67) CNST -> CTE_F seen_cte_f .

    STAR            reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    FWD_SLASH       reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    PLUS            reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    MINUS           reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    BIGGER          reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    SMALLER         reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    DOUBLE_EQUALS   reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    DIFFERENT       reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    AND             reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    OR              reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    SEMI_COLON      reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    COMMA           reduce using rule 67 (CNST -> CTE_F seen_cte_f .)
    CLOSE_PARENTHESIS reduce using rule 67 (CNST -> CTE_F seen_cte_f .)


state 120

    (68) CNST -> CTE_I seen_cte_i .

    STAR            reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    FWD_SLASH       reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    PLUS            reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    MINUS           reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    BIGGER          reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    SMALLER         reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    DOUBLE_EQUALS   reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    DIFFERENT       reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    AND             reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    OR              reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    SEMI_COLON      reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    COMMA           reduce using rule 68 (CNST -> CTE_I seen_cte_i .)
    CLOSE_PARENTHESIS reduce using rule 68 (CNST -> CTE_I seen_cte_i .)


state 121

    (82) READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST . CLOSE_PARENTHESIS SEMI_COLON

    CLOSE_PARENTHESIS shift and go to state 151


state 122

    (12) READABLE_LIST -> ID . seen_readable READABLE_LIST_P
    (15) seen_readable -> . empty
    (103) empty -> .

    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    seen_readable                  shift and go to state 152
    empty                          shift and go to state 153

state 123

    (83) WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE . CLOSE_PARENTHESIS SEMI_COLON

    CLOSE_PARENTHESIS shift and go to state 154


state 124

    (84) PRINTABLE -> EXPRESSION . seen_printable PRINTABLE_P
    (87) seen_printable -> . empty
    (103) empty -> .

    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    seen_printable                 shift and go to state 155
    empty                          shift and go to state 156

state 125

    (88) DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION . CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P

    CLOSE_PARENTHESIS shift and go to state 157


state 126

    (95) CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS . EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXPRESSION                     shift and go to state 158
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 127

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID . seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (99) seen_for_kwd -> . empty
    (103) empty -> .

    EQUALS          reduce using rule 103 (empty -> .)

    seen_for_kwd                   shift and go to state 159
    empty                          shift and go to state 160

state 128

    (19) FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 161


state 129

    (25) VARS -> VARS_KWD OPEN_CURLY VAR_LIST_STAR . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 162


state 130

    (4) CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY .

    CLASS_KWD       reduce using rule 4 (CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY .)
    ID              reduce using rule 4 (CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY .)
    TYPE            reduce using rule 4 (CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY .)
    MAIN_KWD        reduce using rule 4 (CLASS -> CLASS_KWD ID SMALLER DERIVES_KWD TYPE BIGGER OPEN_CURLY CLASS_ATTR FUNC_DEF_STAR CLOSE_CURLY .)


state 131

    (5) CLASS_ATTR -> ATTR_KWD OPEN_CURLY VAR_LIST_STAR . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 163


state 132

    (34) ASSIGN -> ID seen_id EQUALS seen_equals . EXPRESSION SEMI_COLON
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXPRESSION                     shift and go to state 164
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 133

    (35) seen_equals -> empty .

    NOT             reduce using rule 35 (seen_equals -> empty .)
    OPEN_PARENTHESIS reduce using rule 35 (seen_equals -> empty .)
    ID              reduce using rule 35 (seen_equals -> empty .)
    CTE_S           reduce using rule 35 (seen_equals -> empty .)
    CTE_F           reduce using rule 35 (seen_equals -> empty .)
    CTE_I           reduce using rule 35 (seen_equals -> empty .)


state 134

    (44) EXPRESSION -> EXP COMP seen_comp_op . EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXP                            shift and go to state 165
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 135

    (46) seen_comp_op -> empty .

    NOT             reduce using rule 46 (seen_comp_op -> empty .)
    OPEN_PARENTHESIS reduce using rule 46 (seen_comp_op -> empty .)
    ID              reduce using rule 46 (seen_comp_op -> empty .)
    CTE_S           reduce using rule 46 (seen_comp_op -> empty .)
    CTE_F           reduce using rule 46 (seen_comp_op -> empty .)
    CTE_I           reduce using rule 46 (seen_comp_op -> empty .)


state 136

    (36) EXP -> TERM seen_term EXP_P .

    BIGGER          reduce using rule 36 (EXP -> TERM seen_term EXP_P .)
    SMALLER         reduce using rule 36 (EXP -> TERM seen_term EXP_P .)
    DOUBLE_EQUALS   reduce using rule 36 (EXP -> TERM seen_term EXP_P .)
    DIFFERENT       reduce using rule 36 (EXP -> TERM seen_term EXP_P .)
    AND             reduce using rule 36 (EXP -> TERM seen_term EXP_P .)
    OR              reduce using rule 36 (EXP -> TERM seen_term EXP_P .)
    SEMI_COLON      reduce using rule 36 (EXP -> TERM seen_term EXP_P .)
    COMMA           reduce using rule 36 (EXP -> TERM seen_term EXP_P .)
    CLOSE_PARENTHESIS reduce using rule 36 (EXP -> TERM seen_term EXP_P .)


state 137

    (39) EXP_P -> PLUS . seen_term_op TERM seen_term EXP_P
    (42) seen_term_op -> .

    OPEN_PARENTHESIS reduce using rule 42 (seen_term_op -> .)
    NOT             reduce using rule 42 (seen_term_op -> .)
    ID              reduce using rule 42 (seen_term_op -> .)
    CTE_S           reduce using rule 42 (seen_term_op -> .)
    CTE_F           reduce using rule 42 (seen_term_op -> .)
    CTE_I           reduce using rule 42 (seen_term_op -> .)

    seen_term_op                   shift and go to state 166

state 138

    (40) EXP_P -> MINUS . seen_term_op TERM seen_term EXP_P
    (42) seen_term_op -> .

    OPEN_PARENTHESIS reduce using rule 42 (seen_term_op -> .)
    NOT             reduce using rule 42 (seen_term_op -> .)
    ID              reduce using rule 42 (seen_term_op -> .)
    CTE_S           reduce using rule 42 (seen_term_op -> .)
    CTE_F           reduce using rule 42 (seen_term_op -> .)
    CTE_I           reduce using rule 42 (seen_term_op -> .)

    seen_term_op                   shift and go to state 167

state 139

    (41) EXP_P -> empty .

    BIGGER          reduce using rule 41 (EXP_P -> empty .)
    SMALLER         reduce using rule 41 (EXP_P -> empty .)
    DOUBLE_EQUALS   reduce using rule 41 (EXP_P -> empty .)
    DIFFERENT       reduce using rule 41 (EXP_P -> empty .)
    AND             reduce using rule 41 (EXP_P -> empty .)
    OR              reduce using rule 41 (EXP_P -> empty .)
    SEMI_COLON      reduce using rule 41 (EXP_P -> empty .)
    COMMA           reduce using rule 41 (EXP_P -> empty .)
    CLOSE_PARENTHESIS reduce using rule 41 (EXP_P -> empty .)


state 140

    (37) EXP -> NOT seen_not EXP . pop_not
    (58) pop_not -> . empty
    (103) empty -> .

    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    pop_not                        shift and go to state 168
    empty                          shift and go to state 169

state 141

    (54) FACTOR -> NOT seen_not FACTOR . pop_not
    (69) TERM -> FACTOR . seen_factor TERM_P
    (58) pop_not -> . empty
    (73) seen_factor -> .
    (103) empty -> .

  ! reduce/reduce conflict for STAR resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for FWD_SLASH resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for BIGGER resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for SMALLER resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for DOUBLE_EQUALS resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for AND resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for OR resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 73 (seen_factor -> .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 73 (seen_factor -> .)
    STAR            reduce using rule 73 (seen_factor -> .)
    FWD_SLASH       reduce using rule 73 (seen_factor -> .)
    PLUS            reduce using rule 73 (seen_factor -> .)
    MINUS           reduce using rule 73 (seen_factor -> .)
    BIGGER          reduce using rule 73 (seen_factor -> .)
    SMALLER         reduce using rule 73 (seen_factor -> .)
    DOUBLE_EQUALS   reduce using rule 73 (seen_factor -> .)
    DIFFERENT       reduce using rule 73 (seen_factor -> .)
    AND             reduce using rule 73 (seen_factor -> .)
    OR              reduce using rule 73 (seen_factor -> .)
    SEMI_COLON      reduce using rule 73 (seen_factor -> .)
    COMMA           reduce using rule 73 (seen_factor -> .)
    CLOSE_PARENTHESIS reduce using rule 73 (seen_factor -> .)

  ! STAR            [ reduce using rule 103 (empty -> .) ]
  ! FWD_SLASH       [ reduce using rule 103 (empty -> .) ]
  ! PLUS            [ reduce using rule 103 (empty -> .) ]
  ! MINUS           [ reduce using rule 103 (empty -> .) ]
  ! BIGGER          [ reduce using rule 103 (empty -> .) ]
  ! SMALLER         [ reduce using rule 103 (empty -> .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 103 (empty -> .) ]
  ! DIFFERENT       [ reduce using rule 103 (empty -> .) ]
  ! AND             [ reduce using rule 103 (empty -> .) ]
  ! OR              [ reduce using rule 103 (empty -> .) ]
  ! SEMI_COLON      [ reduce using rule 103 (empty -> .) ]
  ! COMMA           [ reduce using rule 103 (empty -> .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 103 (empty -> .) ]

    pop_not                        shift and go to state 170
    seen_factor                    shift and go to state 113
    empty                          shift and go to state 169

state 142

    (69) TERM -> FACTOR seen_factor TERM_P .

    PLUS            reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    MINUS           reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    BIGGER          reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    SMALLER         reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    DOUBLE_EQUALS   reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    DIFFERENT       reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    AND             reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    OR              reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    SEMI_COLON      reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    COMMA           reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)
    CLOSE_PARENTHESIS reduce using rule 69 (TERM -> FACTOR seen_factor TERM_P .)


state 143

    (70) TERM_P -> STAR . seen_factor_op FACTOR seen_factor TERM_P
    (74) seen_factor_op -> .

    OPEN_PARENTHESIS reduce using rule 74 (seen_factor_op -> .)
    NOT             reduce using rule 74 (seen_factor_op -> .)
    ID              reduce using rule 74 (seen_factor_op -> .)
    CTE_S           reduce using rule 74 (seen_factor_op -> .)
    CTE_F           reduce using rule 74 (seen_factor_op -> .)
    CTE_I           reduce using rule 74 (seen_factor_op -> .)

    seen_factor_op                 shift and go to state 171

state 144

    (71) TERM_P -> FWD_SLASH . seen_factor_op FACTOR seen_factor TERM_P
    (74) seen_factor_op -> .

    OPEN_PARENTHESIS reduce using rule 74 (seen_factor_op -> .)
    NOT             reduce using rule 74 (seen_factor_op -> .)
    ID              reduce using rule 74 (seen_factor_op -> .)
    CTE_S           reduce using rule 74 (seen_factor_op -> .)
    CTE_F           reduce using rule 74 (seen_factor_op -> .)
    CTE_I           reduce using rule 74 (seen_factor_op -> .)

    seen_factor_op                 shift and go to state 172

state 145

    (72) TERM_P -> empty .

    PLUS            reduce using rule 72 (TERM_P -> empty .)
    MINUS           reduce using rule 72 (TERM_P -> empty .)
    BIGGER          reduce using rule 72 (TERM_P -> empty .)
    SMALLER         reduce using rule 72 (TERM_P -> empty .)
    DOUBLE_EQUALS   reduce using rule 72 (TERM_P -> empty .)
    DIFFERENT       reduce using rule 72 (TERM_P -> empty .)
    AND             reduce using rule 72 (TERM_P -> empty .)
    OR              reduce using rule 72 (TERM_P -> empty .)
    SEMI_COLON      reduce using rule 72 (TERM_P -> empty .)
    COMMA           reduce using rule 72 (TERM_P -> empty .)
    CLOSE_PARENTHESIS reduce using rule 72 (TERM_P -> empty .)


state 146

    (53) FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION . CLOSE_PARENTHESIS seen_close_parenthesis

    CLOSE_PARENTHESIS shift and go to state 173


state 147

    (9) ID_LIST -> ID . ID_LIST_P
    (56) FACTOR -> ID . seen_id
    (75) FUNC_CALL -> ID . OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (10) ID_LIST_P -> . COMMA ID ID_LIST_P
    (11) ID_LIST_P -> . empty
    (62) seen_id -> .
    (103) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 62 (seen_id -> .)
    OPEN_PARENTHESIS shift and go to state 117
    COMMA           shift and go to state 18
    STAR            reduce using rule 62 (seen_id -> .)
    FWD_SLASH       reduce using rule 62 (seen_id -> .)
    PLUS            reduce using rule 62 (seen_id -> .)
    MINUS           reduce using rule 62 (seen_id -> .)
    BIGGER          reduce using rule 62 (seen_id -> .)
    SMALLER         reduce using rule 62 (seen_id -> .)
    DOUBLE_EQUALS   reduce using rule 62 (seen_id -> .)
    DIFFERENT       reduce using rule 62 (seen_id -> .)
    AND             reduce using rule 62 (seen_id -> .)
    OR              reduce using rule 62 (seen_id -> .)
    CLOSE_PARENTHESIS reduce using rule 62 (seen_id -> .)

  ! COMMA           [ reduce using rule 62 (seen_id -> .) ]
  ! COMMA           [ reduce using rule 103 (empty -> .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 103 (empty -> .) ]

    ID_LIST_P                      shift and go to state 17
    seen_id                        shift and go to state 116
    empty                          shift and go to state 19

state 148

    (75) FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 174


state 149

    (76) ARG_LIST -> ID_LIST . ARG_LIST_P
    (78) ARG_LIST_P -> . COMMA ID_LIST ARG_LIST_P
    (79) ARG_LIST_P -> . COMMA EXPRESSION ARG_LIST_P
    (80) ARG_LIST_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 176
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    ARG_LIST_P                     shift and go to state 175
    empty                          shift and go to state 177

state 150

    (77) ARG_LIST -> EXPRESSION . ARG_LIST_P
    (78) ARG_LIST_P -> . COMMA ID_LIST ARG_LIST_P
    (79) ARG_LIST_P -> . COMMA EXPRESSION ARG_LIST_P
    (80) ARG_LIST_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 176
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    ARG_LIST_P                     shift and go to state 178
    empty                          shift and go to state 177

state 151

    (82) READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS . SEMI_COLON

    SEMI_COLON      shift and go to state 179


state 152

    (12) READABLE_LIST -> ID seen_readable . READABLE_LIST_P
    (13) READABLE_LIST_P -> . COMMA ID seen_readable READABLE_LIST_P
    (14) READABLE_LIST_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 181
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    READABLE_LIST_P                shift and go to state 180
    empty                          shift and go to state 182

state 153

    (15) seen_readable -> empty .

    COMMA           reduce using rule 15 (seen_readable -> empty .)
    CLOSE_PARENTHESIS reduce using rule 15 (seen_readable -> empty .)


state 154

    (83) WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS . SEMI_COLON

    SEMI_COLON      shift and go to state 183


state 155

    (84) PRINTABLE -> EXPRESSION seen_printable . PRINTABLE_P
    (85) PRINTABLE_P -> . COMMA EXPRESSION seen_printable PRINTABLE_P
    (86) PRINTABLE_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 185
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    PRINTABLE_P                    shift and go to state 184
    empty                          shift and go to state 186

state 156

    (87) seen_printable -> empty .

    COMMA           reduce using rule 87 (seen_printable -> empty .)
    CLOSE_PARENTHESIS reduce using rule 87 (seen_printable -> empty .)


state 157

    (88) DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS . seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (91) seen_if_kwd -> . empty
    (103) empty -> .

    OPEN_CURLY      reduce using rule 103 (empty -> .)

    seen_if_kwd                    shift and go to state 187
    empty                          shift and go to state 188

state 158

    (95) CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION . CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_PARENTHESIS shift and go to state 189


state 159

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd . EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    EQUALS          shift and go to state 190


state 160

    (99) seen_for_kwd -> empty .

    EQUALS          reduce using rule 99 (seen_for_kwd -> empty .)


state 161

    (19) FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .

    TYPE            reduce using rule 19 (FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    MAIN_KWD        reduce using rule 19 (FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    CLOSE_CURLY     reduce using rule 19 (FUNC_DEF -> TYPE ID OPEN_PARENTHESIS FUNC_PARAM CLOSE_PARENTHESIS VARS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)


state 162

    (25) VARS -> VARS_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY .

    OPEN_CURLY      reduce using rule 25 (VARS -> VARS_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY .)


state 163

    (5) CLASS_ATTR -> ATTR_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY .

    TYPE            reduce using rule 5 (CLASS_ATTR -> ATTR_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY .)
    CLOSE_CURLY     reduce using rule 5 (CLASS_ATTR -> ATTR_KWD OPEN_CURLY VAR_LIST_STAR CLOSE_CURLY .)


state 164

    (34) ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION . SEMI_COLON

    SEMI_COLON      shift and go to state 191


state 165

    (44) EXPRESSION -> EXP COMP seen_comp_op EXP . seen_comp
    (45) seen_comp -> . empty
    (103) empty -> .

    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    seen_comp                      shift and go to state 192
    empty                          shift and go to state 193

state 166

    (39) EXP_P -> PLUS seen_term_op . TERM seen_term EXP_P
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    OPEN_PARENTHESIS shift and go to state 83
    NOT             shift and go to state 195
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    TERM                           shift and go to state 194
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 167

    (40) EXP_P -> MINUS seen_term_op . TERM seen_term EXP_P
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    OPEN_PARENTHESIS shift and go to state 83
    NOT             shift and go to state 195
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    TERM                           shift and go to state 196
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 168

    (37) EXP -> NOT seen_not EXP pop_not .

    BIGGER          reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)
    SMALLER         reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)
    DOUBLE_EQUALS   reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)
    DIFFERENT       reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)
    AND             reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)
    OR              reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)
    SEMI_COLON      reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)
    COMMA           reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)
    CLOSE_PARENTHESIS reduce using rule 37 (EXP -> NOT seen_not EXP pop_not .)


state 169

    (58) pop_not -> empty .

    BIGGER          reduce using rule 58 (pop_not -> empty .)
    SMALLER         reduce using rule 58 (pop_not -> empty .)
    DOUBLE_EQUALS   reduce using rule 58 (pop_not -> empty .)
    DIFFERENT       reduce using rule 58 (pop_not -> empty .)
    AND             reduce using rule 58 (pop_not -> empty .)
    OR              reduce using rule 58 (pop_not -> empty .)
    SEMI_COLON      reduce using rule 58 (pop_not -> empty .)
    COMMA           reduce using rule 58 (pop_not -> empty .)
    CLOSE_PARENTHESIS reduce using rule 58 (pop_not -> empty .)
    STAR            reduce using rule 58 (pop_not -> empty .)
    FWD_SLASH       reduce using rule 58 (pop_not -> empty .)
    PLUS            reduce using rule 58 (pop_not -> empty .)
    MINUS           reduce using rule 58 (pop_not -> empty .)


state 170

    (54) FACTOR -> NOT seen_not FACTOR pop_not .

    STAR            reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    FWD_SLASH       reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    PLUS            reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    MINUS           reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    BIGGER          reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    SMALLER         reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    DOUBLE_EQUALS   reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    DIFFERENT       reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    AND             reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    OR              reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    SEMI_COLON      reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    COMMA           reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)
    CLOSE_PARENTHESIS reduce using rule 54 (FACTOR -> NOT seen_not FACTOR pop_not .)


state 171

    (70) TERM_P -> STAR seen_factor_op . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    OPEN_PARENTHESIS shift and go to state 83
    NOT             shift and go to state 195
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    FACTOR                         shift and go to state 197
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 172

    (71) TERM_P -> FWD_SLASH seen_factor_op . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    OPEN_PARENTHESIS shift and go to state 83
    NOT             shift and go to state 195
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    FACTOR                         shift and go to state 198
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 173

    (53) FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS . seen_close_parenthesis
    (61) seen_close_parenthesis -> . empty
    (103) empty -> .

    STAR            reduce using rule 103 (empty -> .)
    FWD_SLASH       reduce using rule 103 (empty -> .)
    PLUS            reduce using rule 103 (empty -> .)
    MINUS           reduce using rule 103 (empty -> .)
    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    seen_close_parenthesis         shift and go to state 199
    empty                          shift and go to state 200

state 174

    (75) FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .

    STAR            reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    FWD_SLASH       reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    PLUS            reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    BIGGER          reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    SMALLER         reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    DIFFERENT       reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    AND             reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    OR              reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    SEMI_COLON      reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 75 (FUNC_CALL -> ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS .)


state 175

    (76) ARG_LIST -> ID_LIST ARG_LIST_P .

    CLOSE_PARENTHESIS reduce using rule 76 (ARG_LIST -> ID_LIST ARG_LIST_P .)


state 176

    (78) ARG_LIST_P -> COMMA . ID_LIST ARG_LIST_P
    (79) ARG_LIST_P -> COMMA . EXPRESSION ARG_LIST_P
    (9) ID_LIST -> . ID ID_LIST_P
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    ID              shift and go to state 147
    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    ID_LIST                        shift and go to state 201
    EXPRESSION                     shift and go to state 202
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 177

    (80) ARG_LIST_P -> empty .

    CLOSE_PARENTHESIS reduce using rule 80 (ARG_LIST_P -> empty .)


state 178

    (77) ARG_LIST -> EXPRESSION ARG_LIST_P .

    CLOSE_PARENTHESIS reduce using rule 77 (ARG_LIST -> EXPRESSION ARG_LIST_P .)


state 179

    (82) READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .

    ID              reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)
    RETURN_KWD      reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)
    READ_KWD        reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)
    WRITE_KWD       reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)
    IF_KWD          reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)
    WHILE_KWD       reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)
    FOR_KWD         reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)
    CLOSE_CURLY     reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)
    CLOSE_PARENTHESIS reduce using rule 82 (READ -> READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON .)


state 180

    (12) READABLE_LIST -> ID seen_readable READABLE_LIST_P .

    CLOSE_PARENTHESIS reduce using rule 12 (READABLE_LIST -> ID seen_readable READABLE_LIST_P .)


state 181

    (13) READABLE_LIST_P -> COMMA . ID seen_readable READABLE_LIST_P

    ID              shift and go to state 203


state 182

    (14) READABLE_LIST_P -> empty .

    CLOSE_PARENTHESIS reduce using rule 14 (READABLE_LIST_P -> empty .)


state 183

    (83) WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .

    ID              reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)
    RETURN_KWD      reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)
    READ_KWD        reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)
    WRITE_KWD       reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)
    IF_KWD          reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)
    WHILE_KWD       reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)
    FOR_KWD         reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)
    CLOSE_CURLY     reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)
    CLOSE_PARENTHESIS reduce using rule 83 (WRITE -> WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON .)


state 184

    (84) PRINTABLE -> EXPRESSION seen_printable PRINTABLE_P .

    CLOSE_PARENTHESIS reduce using rule 84 (PRINTABLE -> EXPRESSION seen_printable PRINTABLE_P .)


state 185

    (85) PRINTABLE_P -> COMMA . EXPRESSION seen_printable PRINTABLE_P
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXPRESSION                     shift and go to state 204
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 186

    (86) PRINTABLE_P -> empty .

    CLOSE_PARENTHESIS reduce using rule 86 (PRINTABLE_P -> empty .)


state 187

    (88) DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd . OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P

    OPEN_CURLY      shift and go to state 205


state 188

    (91) seen_if_kwd -> empty .

    OPEN_CURLY      reduce using rule 91 (seen_if_kwd -> empty .)


state 189

    (95) CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS . seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (97) seen_while_exp -> . empty
    (103) empty -> .

    OPEN_CURLY      reduce using rule 103 (empty -> .)

    seen_while_exp                 shift and go to state 206
    empty                          shift and go to state 207

state 190

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS . EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXPRESSION                     shift and go to state 208
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 191

    (34) ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .

    ID              reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)
    RETURN_KWD      reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)
    READ_KWD        reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)
    WRITE_KWD       reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)
    IF_KWD          reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)
    WHILE_KWD       reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)
    FOR_KWD         reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)
    CLOSE_CURLY     reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)
    CLOSE_PARENTHESIS reduce using rule 34 (ASSIGN -> ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON .)


state 192

    (44) EXPRESSION -> EXP COMP seen_comp_op EXP seen_comp .

    SEMI_COLON      reduce using rule 44 (EXPRESSION -> EXP COMP seen_comp_op EXP seen_comp .)
    COMMA           reduce using rule 44 (EXPRESSION -> EXP COMP seen_comp_op EXP seen_comp .)
    CLOSE_PARENTHESIS reduce using rule 44 (EXPRESSION -> EXP COMP seen_comp_op EXP seen_comp .)


state 193

    (45) seen_comp -> empty .

    SEMI_COLON      reduce using rule 45 (seen_comp -> empty .)
    COMMA           reduce using rule 45 (seen_comp -> empty .)
    CLOSE_PARENTHESIS reduce using rule 45 (seen_comp -> empty .)


state 194

    (39) EXP_P -> PLUS seen_term_op TERM . seen_term EXP_P
    (38) seen_term -> .

    PLUS            reduce using rule 38 (seen_term -> .)
    MINUS           reduce using rule 38 (seen_term -> .)
    BIGGER          reduce using rule 38 (seen_term -> .)
    SMALLER         reduce using rule 38 (seen_term -> .)
    DOUBLE_EQUALS   reduce using rule 38 (seen_term -> .)
    DIFFERENT       reduce using rule 38 (seen_term -> .)
    AND             reduce using rule 38 (seen_term -> .)
    OR              reduce using rule 38 (seen_term -> .)
    SEMI_COLON      reduce using rule 38 (seen_term -> .)
    COMMA           reduce using rule 38 (seen_term -> .)
    CLOSE_PARENTHESIS reduce using rule 38 (seen_term -> .)

    seen_term                      shift and go to state 209

state 195

    (54) FACTOR -> NOT . seen_not FACTOR pop_not
    (59) seen_not -> . empty
    (103) empty -> .

    OPEN_PARENTHESIS reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_S           reduce using rule 103 (empty -> .)
    CTE_F           reduce using rule 103 (empty -> .)
    CTE_I           reduce using rule 103 (empty -> .)

    seen_not                       shift and go to state 210
    empty                          shift and go to state 112

state 196

    (40) EXP_P -> MINUS seen_term_op TERM . seen_term EXP_P
    (38) seen_term -> .

    PLUS            reduce using rule 38 (seen_term -> .)
    MINUS           reduce using rule 38 (seen_term -> .)
    BIGGER          reduce using rule 38 (seen_term -> .)
    SMALLER         reduce using rule 38 (seen_term -> .)
    DOUBLE_EQUALS   reduce using rule 38 (seen_term -> .)
    DIFFERENT       reduce using rule 38 (seen_term -> .)
    AND             reduce using rule 38 (seen_term -> .)
    OR              reduce using rule 38 (seen_term -> .)
    SEMI_COLON      reduce using rule 38 (seen_term -> .)
    COMMA           reduce using rule 38 (seen_term -> .)
    CLOSE_PARENTHESIS reduce using rule 38 (seen_term -> .)

    seen_term                      shift and go to state 211

state 197

    (70) TERM_P -> STAR seen_factor_op FACTOR . seen_factor TERM_P
    (73) seen_factor -> .

    STAR            reduce using rule 73 (seen_factor -> .)
    FWD_SLASH       reduce using rule 73 (seen_factor -> .)
    PLUS            reduce using rule 73 (seen_factor -> .)
    MINUS           reduce using rule 73 (seen_factor -> .)
    BIGGER          reduce using rule 73 (seen_factor -> .)
    SMALLER         reduce using rule 73 (seen_factor -> .)
    DOUBLE_EQUALS   reduce using rule 73 (seen_factor -> .)
    DIFFERENT       reduce using rule 73 (seen_factor -> .)
    AND             reduce using rule 73 (seen_factor -> .)
    OR              reduce using rule 73 (seen_factor -> .)
    SEMI_COLON      reduce using rule 73 (seen_factor -> .)
    COMMA           reduce using rule 73 (seen_factor -> .)
    CLOSE_PARENTHESIS reduce using rule 73 (seen_factor -> .)

    seen_factor                    shift and go to state 212

state 198

    (71) TERM_P -> FWD_SLASH seen_factor_op FACTOR . seen_factor TERM_P
    (73) seen_factor -> .

    STAR            reduce using rule 73 (seen_factor -> .)
    FWD_SLASH       reduce using rule 73 (seen_factor -> .)
    PLUS            reduce using rule 73 (seen_factor -> .)
    MINUS           reduce using rule 73 (seen_factor -> .)
    BIGGER          reduce using rule 73 (seen_factor -> .)
    SMALLER         reduce using rule 73 (seen_factor -> .)
    DOUBLE_EQUALS   reduce using rule 73 (seen_factor -> .)
    DIFFERENT       reduce using rule 73 (seen_factor -> .)
    AND             reduce using rule 73 (seen_factor -> .)
    OR              reduce using rule 73 (seen_factor -> .)
    SEMI_COLON      reduce using rule 73 (seen_factor -> .)
    COMMA           reduce using rule 73 (seen_factor -> .)
    CLOSE_PARENTHESIS reduce using rule 73 (seen_factor -> .)

    seen_factor                    shift and go to state 213

state 199

    (53) FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .

    STAR            reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    FWD_SLASH       reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    PLUS            reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    MINUS           reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    BIGGER          reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    SMALLER         reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    DOUBLE_EQUALS   reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    DIFFERENT       reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    AND             reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    OR              reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    SEMI_COLON      reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    COMMA           reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)
    CLOSE_PARENTHESIS reduce using rule 53 (FACTOR -> OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis .)


state 200

    (61) seen_close_parenthesis -> empty .

    STAR            reduce using rule 61 (seen_close_parenthesis -> empty .)
    FWD_SLASH       reduce using rule 61 (seen_close_parenthesis -> empty .)
    PLUS            reduce using rule 61 (seen_close_parenthesis -> empty .)
    MINUS           reduce using rule 61 (seen_close_parenthesis -> empty .)
    BIGGER          reduce using rule 61 (seen_close_parenthesis -> empty .)
    SMALLER         reduce using rule 61 (seen_close_parenthesis -> empty .)
    DOUBLE_EQUALS   reduce using rule 61 (seen_close_parenthesis -> empty .)
    DIFFERENT       reduce using rule 61 (seen_close_parenthesis -> empty .)
    AND             reduce using rule 61 (seen_close_parenthesis -> empty .)
    OR              reduce using rule 61 (seen_close_parenthesis -> empty .)
    SEMI_COLON      reduce using rule 61 (seen_close_parenthesis -> empty .)
    COMMA           reduce using rule 61 (seen_close_parenthesis -> empty .)
    CLOSE_PARENTHESIS reduce using rule 61 (seen_close_parenthesis -> empty .)


state 201

    (78) ARG_LIST_P -> COMMA ID_LIST . ARG_LIST_P
    (78) ARG_LIST_P -> . COMMA ID_LIST ARG_LIST_P
    (79) ARG_LIST_P -> . COMMA EXPRESSION ARG_LIST_P
    (80) ARG_LIST_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 176
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    ARG_LIST_P                     shift and go to state 214
    empty                          shift and go to state 177

state 202

    (79) ARG_LIST_P -> COMMA EXPRESSION . ARG_LIST_P
    (78) ARG_LIST_P -> . COMMA ID_LIST ARG_LIST_P
    (79) ARG_LIST_P -> . COMMA EXPRESSION ARG_LIST_P
    (80) ARG_LIST_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 176
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    ARG_LIST_P                     shift and go to state 215
    empty                          shift and go to state 177

state 203

    (13) READABLE_LIST_P -> COMMA ID . seen_readable READABLE_LIST_P
    (15) seen_readable -> . empty
    (103) empty -> .

    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    seen_readable                  shift and go to state 216
    empty                          shift and go to state 153

state 204

    (85) PRINTABLE_P -> COMMA EXPRESSION . seen_printable PRINTABLE_P
    (87) seen_printable -> . empty
    (103) empty -> .

    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    seen_printable                 shift and go to state 217
    empty                          shift and go to state 156

state 205

    (88) DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY . STATEMENT_STAR CLOSE_CURLY DECISION_P
    (26) STATEMENT_STAR -> . STATEMENT STATEMENT_STAR
    (27) STATEMENT_STAR -> . empty
    (28) STATEMENT -> . ASSIGN
    (29) STATEMENT -> . FUNC_RETURN
    (30) STATEMENT -> . READ
    (31) STATEMENT -> . WRITE
    (32) STATEMENT -> . DECISION
    (33) STATEMENT -> . REPETITION
    (103) empty -> .
    (34) ASSIGN -> . ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (81) FUNC_RETURN -> . RETURN_KWD EXPRESSION SEMI_COLON
    (82) READ -> . READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (83) WRITE -> . WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (88) DECISION -> . IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (93) REPETITION -> . CONDITIONAL_REP
    (94) REPETITION -> . UNCONDITIONAL_REP
    (95) CONDITIONAL_REP -> . WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (98) UNCONDITIONAL_REP -> . FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 51
    RETURN_KWD      shift and go to state 61
    READ_KWD        shift and go to state 62
    WRITE_KWD       shift and go to state 63
    IF_KWD          shift and go to state 64
    WHILE_KWD       shift and go to state 67
    FOR_KWD         shift and go to state 68

    STATEMENT_STAR                 shift and go to state 218
    STATEMENT                      shift and go to state 53
    empty                          shift and go to state 54
    ASSIGN                         shift and go to state 55
    FUNC_RETURN                    shift and go to state 56
    READ                           shift and go to state 57
    WRITE                          shift and go to state 58
    DECISION                       shift and go to state 59
    REPETITION                     shift and go to state 60
    CONDITIONAL_REP                shift and go to state 65
    UNCONDITIONAL_REP              shift and go to state 66

state 206

    (95) CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp . OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_CURLY      shift and go to state 219


state 207

    (97) seen_while_exp -> empty .

    OPEN_CURLY      reduce using rule 97 (seen_while_exp -> empty .)


state 208

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION . seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (101) seen_for_start_exp -> . empty
    (103) empty -> .

    SEMI_COLON      reduce using rule 103 (empty -> .)

    seen_for_start_exp             shift and go to state 220
    empty                          shift and go to state 221

state 209

    (39) EXP_P -> PLUS seen_term_op TERM seen_term . EXP_P
    (39) EXP_P -> . PLUS seen_term_op TERM seen_term EXP_P
    (40) EXP_P -> . MINUS seen_term_op TERM seen_term EXP_P
    (41) EXP_P -> . empty
    (103) empty -> .

    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    EXP_P                          shift and go to state 222
    empty                          shift and go to state 139

state 210

    (54) FACTOR -> NOT seen_not . FACTOR pop_not
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    OPEN_PARENTHESIS shift and go to state 83
    NOT             shift and go to state 195
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    FACTOR                         shift and go to state 223
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 211

    (40) EXP_P -> MINUS seen_term_op TERM seen_term . EXP_P
    (39) EXP_P -> . PLUS seen_term_op TERM seen_term EXP_P
    (40) EXP_P -> . MINUS seen_term_op TERM seen_term EXP_P
    (41) EXP_P -> . empty
    (103) empty -> .

    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    EXP_P                          shift and go to state 224
    empty                          shift and go to state 139

state 212

    (70) TERM_P -> STAR seen_factor_op FACTOR seen_factor . TERM_P
    (70) TERM_P -> . STAR seen_factor_op FACTOR seen_factor TERM_P
    (71) TERM_P -> . FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P
    (72) TERM_P -> . empty
    (103) empty -> .

    STAR            shift and go to state 143
    FWD_SLASH       shift and go to state 144
    PLUS            reduce using rule 103 (empty -> .)
    MINUS           reduce using rule 103 (empty -> .)
    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    TERM_P                         shift and go to state 225
    empty                          shift and go to state 145

state 213

    (71) TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor . TERM_P
    (70) TERM_P -> . STAR seen_factor_op FACTOR seen_factor TERM_P
    (71) TERM_P -> . FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P
    (72) TERM_P -> . empty
    (103) empty -> .

    STAR            shift and go to state 143
    FWD_SLASH       shift and go to state 144
    PLUS            reduce using rule 103 (empty -> .)
    MINUS           reduce using rule 103 (empty -> .)
    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    TERM_P                         shift and go to state 226
    empty                          shift and go to state 145

state 214

    (78) ARG_LIST_P -> COMMA ID_LIST ARG_LIST_P .

    CLOSE_PARENTHESIS reduce using rule 78 (ARG_LIST_P -> COMMA ID_LIST ARG_LIST_P .)


state 215

    (79) ARG_LIST_P -> COMMA EXPRESSION ARG_LIST_P .

    CLOSE_PARENTHESIS reduce using rule 79 (ARG_LIST_P -> COMMA EXPRESSION ARG_LIST_P .)


state 216

    (13) READABLE_LIST_P -> COMMA ID seen_readable . READABLE_LIST_P
    (13) READABLE_LIST_P -> . COMMA ID seen_readable READABLE_LIST_P
    (14) READABLE_LIST_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 181
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    READABLE_LIST_P                shift and go to state 227
    empty                          shift and go to state 182

state 217

    (85) PRINTABLE_P -> COMMA EXPRESSION seen_printable . PRINTABLE_P
    (85) PRINTABLE_P -> . COMMA EXPRESSION seen_printable PRINTABLE_P
    (86) PRINTABLE_P -> . empty
    (103) empty -> .

    COMMA           shift and go to state 185
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    PRINTABLE_P                    shift and go to state 228
    empty                          shift and go to state 186

state 218

    (88) DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR . CLOSE_CURLY DECISION_P

    CLOSE_CURLY     shift and go to state 229


state 219

    (95) CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY . STATEMENT_STAR CLOSE_CURLY
    (26) STATEMENT_STAR -> . STATEMENT STATEMENT_STAR
    (27) STATEMENT_STAR -> . empty
    (28) STATEMENT -> . ASSIGN
    (29) STATEMENT -> . FUNC_RETURN
    (30) STATEMENT -> . READ
    (31) STATEMENT -> . WRITE
    (32) STATEMENT -> . DECISION
    (33) STATEMENT -> . REPETITION
    (103) empty -> .
    (34) ASSIGN -> . ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (81) FUNC_RETURN -> . RETURN_KWD EXPRESSION SEMI_COLON
    (82) READ -> . READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (83) WRITE -> . WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (88) DECISION -> . IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (93) REPETITION -> . CONDITIONAL_REP
    (94) REPETITION -> . UNCONDITIONAL_REP
    (95) CONDITIONAL_REP -> . WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (98) UNCONDITIONAL_REP -> . FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 51
    RETURN_KWD      shift and go to state 61
    READ_KWD        shift and go to state 62
    WRITE_KWD       shift and go to state 63
    IF_KWD          shift and go to state 64
    WHILE_KWD       shift and go to state 67
    FOR_KWD         shift and go to state 68

    STATEMENT_STAR                 shift and go to state 230
    STATEMENT                      shift and go to state 53
    empty                          shift and go to state 54
    ASSIGN                         shift and go to state 55
    FUNC_RETURN                    shift and go to state 56
    READ                           shift and go to state 57
    WRITE                          shift and go to state 58
    DECISION                       shift and go to state 59
    REPETITION                     shift and go to state 60
    CONDITIONAL_REP                shift and go to state 65
    UNCONDITIONAL_REP              shift and go to state 66

state 220

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp . SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    SEMI_COLON      shift and go to state 231


state 221

    (101) seen_for_start_exp -> empty .

    SEMI_COLON      reduce using rule 101 (seen_for_start_exp -> empty .)


state 222

    (39) EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .

    BIGGER          reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)
    SMALLER         reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)
    DOUBLE_EQUALS   reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)
    DIFFERENT       reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)
    AND             reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)
    OR              reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)
    SEMI_COLON      reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)
    COMMA           reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)
    CLOSE_PARENTHESIS reduce using rule 39 (EXP_P -> PLUS seen_term_op TERM seen_term EXP_P .)


state 223

    (54) FACTOR -> NOT seen_not FACTOR . pop_not
    (58) pop_not -> . empty
    (103) empty -> .

    STAR            reduce using rule 103 (empty -> .)
    FWD_SLASH       reduce using rule 103 (empty -> .)
    PLUS            reduce using rule 103 (empty -> .)
    MINUS           reduce using rule 103 (empty -> .)
    BIGGER          reduce using rule 103 (empty -> .)
    SMALLER         reduce using rule 103 (empty -> .)
    DOUBLE_EQUALS   reduce using rule 103 (empty -> .)
    DIFFERENT       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMI_COLON      reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    pop_not                        shift and go to state 170
    empty                          shift and go to state 169

state 224

    (40) EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .

    BIGGER          reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)
    SMALLER         reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)
    DOUBLE_EQUALS   reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)
    DIFFERENT       reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)
    AND             reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)
    OR              reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)
    SEMI_COLON      reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)
    COMMA           reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)
    CLOSE_PARENTHESIS reduce using rule 40 (EXP_P -> MINUS seen_term_op TERM seen_term EXP_P .)


state 225

    (70) TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .

    PLUS            reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    MINUS           reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    BIGGER          reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    SMALLER         reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    DOUBLE_EQUALS   reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    DIFFERENT       reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    AND             reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    OR              reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    SEMI_COLON      reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    COMMA           reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)
    CLOSE_PARENTHESIS reduce using rule 70 (TERM_P -> STAR seen_factor_op FACTOR seen_factor TERM_P .)


state 226

    (71) TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .

    PLUS            reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    MINUS           reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    BIGGER          reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    SMALLER         reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    DOUBLE_EQUALS   reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    DIFFERENT       reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    AND             reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    OR              reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    SEMI_COLON      reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    COMMA           reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)
    CLOSE_PARENTHESIS reduce using rule 71 (TERM_P -> FWD_SLASH seen_factor_op FACTOR seen_factor TERM_P .)


state 227

    (13) READABLE_LIST_P -> COMMA ID seen_readable READABLE_LIST_P .

    CLOSE_PARENTHESIS reduce using rule 13 (READABLE_LIST_P -> COMMA ID seen_readable READABLE_LIST_P .)


state 228

    (85) PRINTABLE_P -> COMMA EXPRESSION seen_printable PRINTABLE_P .

    CLOSE_PARENTHESIS reduce using rule 85 (PRINTABLE_P -> COMMA EXPRESSION seen_printable PRINTABLE_P .)


state 229

    (88) DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY . DECISION_P
    (89) DECISION_P -> . ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (90) DECISION_P -> . empty
    (103) empty -> .

    ELSE_KWD        shift and go to state 233
    ID              reduce using rule 103 (empty -> .)
    RETURN_KWD      reduce using rule 103 (empty -> .)
    READ_KWD        reduce using rule 103 (empty -> .)
    WRITE_KWD       reduce using rule 103 (empty -> .)
    IF_KWD          reduce using rule 103 (empty -> .)
    WHILE_KWD       reduce using rule 103 (empty -> .)
    FOR_KWD         reduce using rule 103 (empty -> .)
    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    DECISION_P                     shift and go to state 232
    empty                          shift and go to state 234

state 230

    (95) CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 235


state 231

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON . EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (43) EXPRESSION -> . EXP
    (44) EXPRESSION -> . EXP COMP seen_comp_op EXP seen_comp
    (36) EXP -> . TERM seen_term EXP_P
    (37) EXP -> . NOT seen_not EXP pop_not
    (69) TERM -> . FACTOR seen_factor TERM_P
    (53) FACTOR -> . OPEN_PARENTHESIS seen_open_parenthesis EXPRESSION CLOSE_PARENTHESIS seen_close_parenthesis
    (54) FACTOR -> . NOT seen_not FACTOR pop_not
    (55) FACTOR -> . FUNC_CALL
    (56) FACTOR -> . ID seen_id
    (57) FACTOR -> . CNST
    (75) FUNC_CALL -> . ID OPEN_PARENTHESIS ARG_LIST CLOSE_PARENTHESIS
    (66) CNST -> . CTE_S seen_cte_s
    (67) CNST -> . CTE_F seen_cte_f
    (68) CNST -> . CTE_I seen_cte_i

    NOT             shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83
    ID              shift and go to state 85
    CTE_S           shift and go to state 87
    CTE_F           shift and go to state 88
    CTE_I           shift and go to state 89

    EXPRESSION                     shift and go to state 236
    EXP                            shift and go to state 79
    TERM                           shift and go to state 80
    FACTOR                         shift and go to state 82
    FUNC_CALL                      shift and go to state 84
    CNST                           shift and go to state 86

state 232

    (88) DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .

    ID              reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)
    RETURN_KWD      reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)
    READ_KWD        reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)
    WRITE_KWD       reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)
    IF_KWD          reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)
    WHILE_KWD       reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)
    FOR_KWD         reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)
    CLOSE_CURLY     reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)
    CLOSE_PARENTHESIS reduce using rule 88 (DECISION -> IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P .)


state 233

    (89) DECISION_P -> ELSE_KWD . seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (92) seen_else_kwd -> . empty
    (103) empty -> .

    OPEN_CURLY      reduce using rule 103 (empty -> .)

    seen_else_kwd                  shift and go to state 237
    empty                          shift and go to state 238

state 234

    (90) DECISION_P -> empty .

    ID              reduce using rule 90 (DECISION_P -> empty .)
    RETURN_KWD      reduce using rule 90 (DECISION_P -> empty .)
    READ_KWD        reduce using rule 90 (DECISION_P -> empty .)
    WRITE_KWD       reduce using rule 90 (DECISION_P -> empty .)
    IF_KWD          reduce using rule 90 (DECISION_P -> empty .)
    WHILE_KWD       reduce using rule 90 (DECISION_P -> empty .)
    FOR_KWD         reduce using rule 90 (DECISION_P -> empty .)
    CLOSE_CURLY     reduce using rule 90 (DECISION_P -> empty .)
    CLOSE_PARENTHESIS reduce using rule 90 (DECISION_P -> empty .)


state 235

    (95) CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .

    ID              reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    RETURN_KWD      reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    READ_KWD        reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    WRITE_KWD       reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    IF_KWD          reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    WHILE_KWD       reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    FOR_KWD         reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    CLOSE_CURLY     reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    CLOSE_PARENTHESIS reduce using rule 95 (CONDITIONAL_REP -> WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)


state 236

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION . seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (102) seen_for_end_exp -> . empty
    (103) empty -> .

    SEMI_COLON      reduce using rule 103 (empty -> .)

    seen_for_end_exp               shift and go to state 239
    empty                          shift and go to state 240

state 237

    (89) DECISION_P -> ELSE_KWD seen_else_kwd . OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_CURLY      shift and go to state 241


state 238

    (92) seen_else_kwd -> empty .

    OPEN_CURLY      reduce using rule 92 (seen_else_kwd -> empty .)


state 239

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp . SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    SEMI_COLON      shift and go to state 242


state 240

    (102) seen_for_end_exp -> empty .

    SEMI_COLON      reduce using rule 102 (seen_for_end_exp -> empty .)


state 241

    (89) DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY . STATEMENT_STAR CLOSE_CURLY
    (26) STATEMENT_STAR -> . STATEMENT STATEMENT_STAR
    (27) STATEMENT_STAR -> . empty
    (28) STATEMENT -> . ASSIGN
    (29) STATEMENT -> . FUNC_RETURN
    (30) STATEMENT -> . READ
    (31) STATEMENT -> . WRITE
    (32) STATEMENT -> . DECISION
    (33) STATEMENT -> . REPETITION
    (103) empty -> .
    (34) ASSIGN -> . ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (81) FUNC_RETURN -> . RETURN_KWD EXPRESSION SEMI_COLON
    (82) READ -> . READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (83) WRITE -> . WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (88) DECISION -> . IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (93) REPETITION -> . CONDITIONAL_REP
    (94) REPETITION -> . UNCONDITIONAL_REP
    (95) CONDITIONAL_REP -> . WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (98) UNCONDITIONAL_REP -> . FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 51
    RETURN_KWD      shift and go to state 61
    READ_KWD        shift and go to state 62
    WRITE_KWD       shift and go to state 63
    IF_KWD          shift and go to state 64
    WHILE_KWD       shift and go to state 67
    FOR_KWD         shift and go to state 68

    STATEMENT_STAR                 shift and go to state 243
    STATEMENT                      shift and go to state 53
    empty                          shift and go to state 54
    ASSIGN                         shift and go to state 55
    FUNC_RETURN                    shift and go to state 56
    READ                           shift and go to state 57
    WRITE                          shift and go to state 58
    DECISION                       shift and go to state 59
    REPETITION                     shift and go to state 60
    CONDITIONAL_REP                shift and go to state 65
    UNCONDITIONAL_REP              shift and go to state 66

state 242

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON . STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (28) STATEMENT -> . ASSIGN
    (29) STATEMENT -> . FUNC_RETURN
    (30) STATEMENT -> . READ
    (31) STATEMENT -> . WRITE
    (32) STATEMENT -> . DECISION
    (33) STATEMENT -> . REPETITION
    (34) ASSIGN -> . ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (81) FUNC_RETURN -> . RETURN_KWD EXPRESSION SEMI_COLON
    (82) READ -> . READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (83) WRITE -> . WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (88) DECISION -> . IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (93) REPETITION -> . CONDITIONAL_REP
    (94) REPETITION -> . UNCONDITIONAL_REP
    (95) CONDITIONAL_REP -> . WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (98) UNCONDITIONAL_REP -> . FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    ID              shift and go to state 51
    RETURN_KWD      shift and go to state 61
    READ_KWD        shift and go to state 62
    WRITE_KWD       shift and go to state 63
    IF_KWD          shift and go to state 64
    WHILE_KWD       shift and go to state 67
    FOR_KWD         shift and go to state 68

    STATEMENT                      shift and go to state 244
    ASSIGN                         shift and go to state 55
    FUNC_RETURN                    shift and go to state 56
    READ                           shift and go to state 57
    WRITE                          shift and go to state 58
    DECISION                       shift and go to state 59
    REPETITION                     shift and go to state 60
    CONDITIONAL_REP                shift and go to state 65
    UNCONDITIONAL_REP              shift and go to state 66

state 243

    (89) DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 245


state 244

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT . seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (100) seen_for_incr_exp -> . empty
    (103) empty -> .

    CLOSE_PARENTHESIS reduce using rule 103 (empty -> .)

    seen_for_incr_exp              shift and go to state 246
    empty                          shift and go to state 247

state 245

    (89) DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .

    ID              reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    RETURN_KWD      reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    READ_KWD        reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    WRITE_KWD       reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    IF_KWD          reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    WHILE_KWD       reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    FOR_KWD         reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    CLOSE_CURLY     reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    CLOSE_PARENTHESIS reduce using rule 89 (DECISION_P -> ELSE_KWD seen_else_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)


state 246

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp . CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_PARENTHESIS shift and go to state 248


state 247

    (100) seen_for_incr_exp -> empty .

    CLOSE_PARENTHESIS reduce using rule 100 (seen_for_incr_exp -> empty .)


state 248

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS . OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    OPEN_CURLY      shift and go to state 249


state 249

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY . STATEMENT_STAR CLOSE_CURLY
    (26) STATEMENT_STAR -> . STATEMENT STATEMENT_STAR
    (27) STATEMENT_STAR -> . empty
    (28) STATEMENT -> . ASSIGN
    (29) STATEMENT -> . FUNC_RETURN
    (30) STATEMENT -> . READ
    (31) STATEMENT -> . WRITE
    (32) STATEMENT -> . DECISION
    (33) STATEMENT -> . REPETITION
    (103) empty -> .
    (34) ASSIGN -> . ID seen_id EQUALS seen_equals EXPRESSION SEMI_COLON
    (81) FUNC_RETURN -> . RETURN_KWD EXPRESSION SEMI_COLON
    (82) READ -> . READ_KWD OPEN_PARENTHESIS READABLE_LIST CLOSE_PARENTHESIS SEMI_COLON
    (83) WRITE -> . WRITE_KWD OPEN_PARENTHESIS PRINTABLE CLOSE_PARENTHESIS SEMI_COLON
    (88) DECISION -> . IF_KWD OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_if_kwd OPEN_CURLY STATEMENT_STAR CLOSE_CURLY DECISION_P
    (93) REPETITION -> . CONDITIONAL_REP
    (94) REPETITION -> . UNCONDITIONAL_REP
    (95) CONDITIONAL_REP -> . WHILE_KWD seen_while_kwd OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS seen_while_exp OPEN_CURLY STATEMENT_STAR CLOSE_CURLY
    (98) UNCONDITIONAL_REP -> . FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY

    CLOSE_CURLY     reduce using rule 103 (empty -> .)
    ID              shift and go to state 51
    RETURN_KWD      shift and go to state 61
    READ_KWD        shift and go to state 62
    WRITE_KWD       shift and go to state 63
    IF_KWD          shift and go to state 64
    WHILE_KWD       shift and go to state 67
    FOR_KWD         shift and go to state 68

    STATEMENT                      shift and go to state 53
    STATEMENT_STAR                 shift and go to state 250
    empty                          shift and go to state 54
    ASSIGN                         shift and go to state 55
    FUNC_RETURN                    shift and go to state 56
    READ                           shift and go to state 57
    WRITE                          shift and go to state 58
    DECISION                       shift and go to state 59
    REPETITION                     shift and go to state 60
    CONDITIONAL_REP                shift and go to state 65
    UNCONDITIONAL_REP              shift and go to state 66

state 250

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 251


state 251

    (98) UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .

    ID              reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    RETURN_KWD      reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    READ_KWD        reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    WRITE_KWD       reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    IF_KWD          reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    WHILE_KWD       reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    FOR_KWD         reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    CLOSE_CURLY     reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)
    CLOSE_PARENTHESIS reduce using rule 98 (UNCONDITIONAL_REP -> FOR_KWD OPEN_PARENTHESIS ID seen_for_kwd EQUALS EXPRESSION seen_for_start_exp SEMI_COLON EXPRESSION seen_for_end_exp SEMI_COLON STATEMENT seen_for_incr_exp CLOSE_PARENTHESIS OPEN_CURLY STATEMENT_STAR CLOSE_CURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 27 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 147 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 147 resolved as shift
WARNING: reduce/reduce conflict in state 141 resolved using rule (seen_factor -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 141
WARNING: reduce/reduce conflict in state 147 resolved using rule (seen_id -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 147
