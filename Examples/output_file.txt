program EXAMPLE_NUCA;															/*/ HEllO /*/
/*/ Example Class /*/															/*/ HEllO /*/
/*/ Showcases NucaScript /*/															/*/ HEllO /*/
class ExampleNuca{															/*/ HEllO /*/
  ATTR{															/*/ HEllO /*/
      int_arr[25] : int;															/*/ HEllO /*/
      float_matrix_a[5][5], float_matrix_b[5][5], float_matrix_c[5][5] : float;															/*/ HEllO /*/
      buffer[1000], separator : string;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  /*/ Recursive Factorial /*/															/*/ HEllO /*/
  int facrec(n : int)															/*/ HEllO /*/
  VARS{}															/*/ HEllO /*/
  {															/*/ HEllO /*/
    if (n == 1) {															/*/ HEllO /*/
      return n;															/*/ HEllO /*/
    }															/*/ HEllO /*/
    return n * this.facrec(n - 1);															/*/ HEllO /*/
  }															/*/ HEllO /*/
  /*/ Linear Factorial /*/															/*/ HEllO /*/
  int faclin(n : int)															/*/ HEllO /*/
  VARS {															/*/ HEllO /*/
      i : int;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  {															/*/ HEllO /*/
    i = n;															/*/ HEllO /*/
    while (i > 1) {															/*/ HEllO /*/
      n *= (i - 1);															/*/ HEllO /*/
      i--;															/*/ HEllO /*/
    }															/*/ HEllO /*/
    return n;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  /*/ Recursive (slow!) Fibonacci /*/															/*/ HEllO /*/
  int fibrec(n : int)															/*/ HEllO /*/
  VARS{}															/*/ HEllO /*/
  {															/*/ HEllO /*/
    if(n <= 1){															/*/ HEllO /*/
      return n;															/*/ HEllO /*/
    }															/*/ HEllO /*/
    return (this.fibrec(n - 1) + this.fibrec(n - 2));															/*/ HEllO /*/
  }															/*/ HEllO /*/
  /*/ Linear (fast!) Fibonacci /*/															/*/ HEllO /*/
  int fiblin(n : int)															/*/ HEllO /*/
  VARS {															/*/ HEllO /*/
    fn, f1, f2, i : int;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  {															/*/ HEllO /*/
    fn = 1;															/*/ HEllO /*/
    f1 = 1;															/*/ HEllO /*/
    f2 = 1;															/*/ HEllO /*/
    for(i = 2; i < n; i++){															/*/ HEllO /*/
      fn = f1 + f2;															/*/ HEllO /*/
      f2 = f1;															/*/ HEllO /*/
      f1 = fn;															/*/ HEllO /*/
    }															/*/ HEllO /*/
    return fn;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  /*/ Array Methods! /*/															/*/ HEllO /*/
  void print_int_array()															/*/ HEllO /*/
  VARS{															/*/ HEllO /*/
    i : int;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  {															/*/ HEllO /*/
    for(i = 0; i < 25; i++){															/*/ HEllO /*/
      println("int_array[" + i + "] = " + this.int_arr[i]);															/*/ HEllO /*/
    }															/*/ HEllO /*/
  }															/*/ HEllO /*/
  void fill_int_array(ascending : boolean)															/*/ HEllO /*/
  VARS{															/*/ HEllO /*/
    i : int;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  {															/*/ HEllO /*/
    for(i = 0; i < 25; i++){															/*/ HEllO /*/
      if (ascending){															/*/ HEllO /*/
        this.int_arr[i] = i;															/*/ HEllO /*/
      } else{															/*/ HEllO /*/
        this.int_arr[24 - i] = i;															/*/ HEllO /*/
      }															/*/ HEllO /*/
    }															/*/ HEllO /*/
  }															/*/ HEllO /*/
  void sort_int_arr(ascending : boolean)															/*/ HEllO /*/
  VARS{															/*/ HEllO /*/
    i, j, temp: int;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  {															/*/ HEllO /*/
    for(i = 0; i < 25 - 1; i++){															/*/ HEllO /*/
      for(j = 0; j < 25 - i - 1; j++){															/*/ HEllO /*/
        if( (ascending && (this.int_arr[j] > this.int_arr[j+1])) || (!ascending && (this.int_arr[j] < this.int_arr[j+1])) ){															/*/ HEllO /*/
          temp = this.int_arr[j];															/*/ HEllO /*/
          this.int_arr[j] = this.int_arr[j + 1];															/*/ HEllO /*/
          this.int_arr[j + 1] = temp;															/*/ HEllO /*/
        }															/*/ HEllO /*/
      }															/*/ HEllO /*/
    }															/*/ HEllO /*/
  }															/*/ HEllO /*/
  void print_float_matrices()															/*/ HEllO /*/
  VARS {															/*/ HEllO /*/
    i, j : int;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  {															/*/ HEllO /*/
    println("--- FLOAT MATRIX A ---");															/*/ HEllO /*/
    for(i = 0; i < 5; i++){															/*/ HEllO /*/
      for(j = 0; j < 5; j++){															/*/ HEllO /*/
        println("float_matrix_a[" + i + "][" + j + "] = " + this.float_matrix_a[i][j]);															/*/ HEllO /*/
      }															/*/ HEllO /*/
    }															/*/ HEllO /*/
    println("--- FLOAT MATRIX B ---");															/*/ HEllO /*/
    for(i = 0; i < 5; i++){															/*/ HEllO /*/
      for(j = 0; j < 5; j++){															/*/ HEllO /*/
        println("float_matrix_b[" + i + "][" + j + "] = " + this.float_matrix_b[i][j]);															/*/ HEllO /*/
      }															/*/ HEllO /*/
    }															/*/ HEllO /*/
    println("--- FLOAT MATRIX C ---");															/*/ HEllO /*/
    for(i = 0; i < 5; i++){															/*/ HEllO /*/
      for(j = 0; j < 5; j++){															/*/ HEllO /*/
        println("float_matrix_c[" + i + "][" + j + "] = " + this.float_matrix_c[i][j]);															/*/ HEllO /*/
      }															/*/ HEllO /*/
    }															/*/ HEllO /*/
  }															/*/ HEllO /*/
  void fill_float_matrices_from_file(file_path : string, separator : string)															/*/ HEllO /*/
  VARS {															/*/ HEllO /*/
    i, j : int;															/*/ HEllO /*/
    buffer[50] : string;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  {															/*/ HEllO /*/
    open(buffer, file_path, separator);															/*/ HEllO /*/
    for(i = 0; i < 5; i++){															/*/ HEllO /*/
      for(j = 0; j < 5; j++){															/*/ HEllO /*/
        this.float_matrix_a[i][j] = stof(buffer[i * 5 + j]);															/*/ HEllO /*/
        this.float_matrix_b[i][j] = stof(buffer[(i * 5 + j) + 25]);															/*/ HEllO /*/
      }															/*/ HEllO /*/
    }															/*/ HEllO /*/
  }															/*/ HEllO /*/
  void multiply_float_matrices()															/*/ HEllO /*/
  VARS {															/*/ HEllO /*/
    i, j : int;															/*/ HEllO /*/
  }															/*/ HEllO /*/
  {															/*/ HEllO /*/
    for(i = 0; i < 5; i++){															/*/ HEllO /*/
      for(j = 0; j < 5; j++){															/*/ HEllO /*/
        this.float_matrix_c[i][j] = this.float_matrix_a[i][j]  * this.float_matrix_b[i][j];															/*/ HEllO /*/
      }															/*/ HEllO /*/
    }															/*/ HEllO /*/
  }															/*/ HEllO /*/
  /*/ File I/O ! /*/															/*/ HEllO /*/
  void self_read()															/*/ HEllO /*/
  VARS{}															/*/ HEllO /*/
  {															/*/ HEllO /*/
    open(this.buffer, "example_nuca.nuca", "\n");															/*/ HEllO /*/
  }															/*/ HEllO /*/
  void self_write()															/*/ HEllO /*/
  VARS{}															/*/ HEllO /*/
  {															/*/ HEllO /*/
    write(this.buffer, "output_file.txt", "\t" * 15 + "/*/ " + this.separator + " /*/\n");															/*/ HEllO /*/
  }															/*/ HEllO /*/
}															/*/ HEllO /*/
/*/ Object variable to instantiate /*/															/*/ HEllO /*/
example_obj : object;															/*/ HEllO /*/
/*/ Main Method /*/															/*/ HEllO /*/
main () {															/*/ HEllO /*/
  example_obj = new ExampleNuca();															/*/ HEllO /*/
  println(example_obj.faclin(10), example_obj.facrec(10));															/*/ HEllO /*/
  println(example_obj.fiblin(15), example_obj.fibrec(15));															/*/ HEllO /*/
  example_obj.fill_int_array(False);															/*/ HEllO /*/
  println(">> Before Sort:");															/*/ HEllO /*/
  example_obj.print_int_array();															/*/ HEllO /*/
  example_obj.sort_int_arr(True);															/*/ HEllO /*/
  println(">> After sort:");															/*/ HEllO /*/
  example_obj.print_int_array();															/*/ HEllO /*/
  example_obj.fill_float_matrices_from_file("matrix_input.txt", ",");															/*/ HEllO /*/
  println(">> Before multiplication:");															/*/ HEllO /*/
  example_obj.print_float_matrices();															/*/ HEllO /*/
  example_obj.multiply_float_matrices();															/*/ HEllO /*/
  println(">> After multiplication:");															/*/ HEllO /*/
  example_obj.print_float_matrices();															/*/ HEllO /*/
  example_obj.self_read();															/*/ HEllO /*/
  print(">> Enter a funny string:\n-- ");															/*/ HEllO /*/
  read(example_obj.separator);															/*/ HEllO /*/
  example_obj.self_write();															/*/ HEllO /*/
  println(">> All done : )");															/*/ HEllO /*/
}															/*/ HEllO /*/
