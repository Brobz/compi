program MYPROGRAM;

res, test_bool : boolean;
a, b, c, d, e, f, g : float;
test_int, func_result : int;
lol, lol_doubled : str;
another_str, test_str  : str;
// THIS IS A COMMENT //
int func(a : str, b : str, func_param_int : int)
VARS {
  func_var_int, c : int;
}
{
  c = 2;
  func_var_int = func_param_int * c;
  b = (func_var_int + 2) * a;
  if(0){
    return 10;
  }
  return 5; // The last statement of a function must always be a return statement; If it is not, the compiler assumes a void-type function! (which is equivalent to an invisible "return;") //
}

int two_params(a : int, b : int)
VARS{}
{ return a * b + 5; }

str one_param(a : int)
VARS{}
{ return a * "HI!"; }

str another_func(a : str, b : str, func_param_int : int)
VARS {

  func_var_int, c : int;
}
{
  c = 2;
  func_var_int = func_param_int * c;
  b = (func_var_int + 2) * a;
  return  "RETURN VALUE : )";
}

boolean always_true()
VARS {}
{
  return 1;
}


void monster_void()
VARS {}
{
  return;
}

main () {
  lol = "lol!";
  lol_doubled = lol * 2;
  another_str =  "String manipulation is nice! Look: " + lol_doubled + "This will also be doubled" * 2;
  write(another_str);
  read(a, b, c, d, e, f, g, g);
  res = !(!(!test_bool || !res));
  res = (a * (b + c / d - e) / f * g >  (a *  (b - c) / d) + e) || !1;
  test_int = res * 5;
  test_str = "TRUE!" * res + "False!" * !res;

  func_result = func(lol, one_param(3), two_params(func(lol, one_param(5), two_params(10, 20)), 5));

  // res = always_true(); //

  while( ( (res == (2 - 1)) && (b + c < 10) ) || always_true()) {
    if (a + b > d) {
      if (a < b) {
        a = 0.0;
        b = b + d;
        //
        COMMENTS
        can also be
        multi
        lined
        //
      }
      else{
        c = a + b;
      }
    }else{
    a = b + c;
    }
  }

  d = b + a * c;

  for(test_int = 1; test_int < (10 * 5) - 40; test_int = test_int + 1 * 3 - 12 / 3 / 2){
    write("loopin!");
    d = b + a * c;
    write(test_int);
    d = b + a * c;
    write("yeee!");
  }

  d = b + a * c;

  write("The result is: ", test_int, test_str);
}
